# coding: utf-8

"""
    APIv3 (Beta)

     # Introduction Just a quick peek!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  # SDK Get started quickly with E-goi with our integration tools. Our SDK is a modern open source library that makes it easy to integrate your application with E-goi services. * <b><a href='https://github.com/E-goi/sdk-java'>Java</a></b> * <b><a href='https://github.com/E-goi/sdk-php'>PHP</a></b> * <b><a href='https://github.com/E-goi/sdk-python'>Python</a></b>  <security-definitions/>  # noqa: E501

    The version of the OpenAPI document: 3.0.0-beta
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from egoi-api.api_client import ApiClient
from egoi-api.exceptions import (
    ApiTypeError,
    ApiValueError
)


class ContactsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def action_attach_tag(self, list_id, attach_tag_request, **kwargs):  # noqa: E501
        """Attach tag to contact  # noqa: E501

        Attaches a tag to the provided contacts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_attach_tag(list_id, attach_tag_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int list_id: ID of the List (required)
        :param AttachTagRequest attach_tag_request: Parameters for the Tag (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AttachTagResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.action_attach_tag_with_http_info(list_id, attach_tag_request, **kwargs)  # noqa: E501

    def action_attach_tag_with_http_info(self, list_id, attach_tag_request, **kwargs):  # noqa: E501
        """Attach tag to contact  # noqa: E501

        Attaches a tag to the provided contacts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_attach_tag_with_http_info(list_id, attach_tag_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int list_id: ID of the List (required)
        :param AttachTagRequest attach_tag_request: Parameters for the Tag (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AttachTagResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['list_id', 'attach_tag_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method action_attach_tag" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'list_id' is set
        if self.api_client.client_side_validation and ('list_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['list_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `list_id` when calling `action_attach_tag`")  # noqa: E501
        # verify the required parameter 'attach_tag_request' is set
        if self.api_client.client_side_validation and ('attach_tag_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['attach_tag_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `attach_tag_request` when calling `action_attach_tag`")  # noqa: E501

        if self.api_client.client_side_validation and 'list_id' in local_var_params and local_var_params['list_id'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `list_id` when calling `action_attach_tag`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'list_id' in local_var_params:
            path_params['list_id'] = local_var_params['list_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'attach_tag_request' in local_var_params:
            body_params = local_var_params['attach_tag_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Apikey']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/contacts/actions/attach-tag', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AttachTagResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def action_detach_tag(self, list_id, attach_tag_request, **kwargs):  # noqa: E501
        """Detach tag to contact  # noqa: E501

        Detach a tag to the provided contacts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_detach_tag(list_id, attach_tag_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int list_id: ID of the List (required)
        :param AttachTagRequest attach_tag_request: Parameters for the Tag (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AttachTagResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.action_detach_tag_with_http_info(list_id, attach_tag_request, **kwargs)  # noqa: E501

    def action_detach_tag_with_http_info(self, list_id, attach_tag_request, **kwargs):  # noqa: E501
        """Detach tag to contact  # noqa: E501

        Detach a tag to the provided contacts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_detach_tag_with_http_info(list_id, attach_tag_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int list_id: ID of the List (required)
        :param AttachTagRequest attach_tag_request: Parameters for the Tag (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AttachTagResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['list_id', 'attach_tag_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method action_detach_tag" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'list_id' is set
        if self.api_client.client_side_validation and ('list_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['list_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `list_id` when calling `action_detach_tag`")  # noqa: E501
        # verify the required parameter 'attach_tag_request' is set
        if self.api_client.client_side_validation and ('attach_tag_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['attach_tag_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `attach_tag_request` when calling `action_detach_tag`")  # noqa: E501

        if self.api_client.client_side_validation and 'list_id' in local_var_params and local_var_params['list_id'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `list_id` when calling `action_detach_tag`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'list_id' in local_var_params:
            path_params['list_id'] = local_var_params['list_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'attach_tag_request' in local_var_params:
            body_params = local_var_params['attach_tag_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Apikey']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/contacts/actions/detach-tag', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AttachTagResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def action_export_contacts(self, list_id, contact_export_request, **kwargs):  # noqa: E501
        """Exports a list of contacts  # noqa: E501

        Exports a list of contacts to the desired callback url  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_export_contacts(list_id, contact_export_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int list_id: ID of the List (required)
        :param ContactExportRequest contact_export_request: Parameters for export (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AcceptedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.action_export_contacts_with_http_info(list_id, contact_export_request, **kwargs)  # noqa: E501

    def action_export_contacts_with_http_info(self, list_id, contact_export_request, **kwargs):  # noqa: E501
        """Exports a list of contacts  # noqa: E501

        Exports a list of contacts to the desired callback url  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_export_contacts_with_http_info(list_id, contact_export_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int list_id: ID of the List (required)
        :param ContactExportRequest contact_export_request: Parameters for export (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AcceptedResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['list_id', 'contact_export_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method action_export_contacts" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'list_id' is set
        if self.api_client.client_side_validation and ('list_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['list_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `list_id` when calling `action_export_contacts`")  # noqa: E501
        # verify the required parameter 'contact_export_request' is set
        if self.api_client.client_side_validation and ('contact_export_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['contact_export_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `contact_export_request` when calling `action_export_contacts`")  # noqa: E501

        if self.api_client.client_side_validation and 'list_id' in local_var_params and local_var_params['list_id'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `list_id` when calling `action_export_contacts`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'list_id' in local_var_params:
            path_params['list_id'] = local_var_params['list_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'contact_export_request' in local_var_params:
            body_params = local_var_params['contact_export_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Apikey']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/contacts/actions/export', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AcceptedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def action_import_bulk(self, list_id, import_bulk_request, **kwargs):  # noqa: E501
        """Import collection of contacts  # noqa: E501

        Imports a collection of contacts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_import_bulk(list_id, import_bulk_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int list_id: ID of the List (required)
        :param ImportBulkRequest import_bulk_request: Parameters for the bulk import (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AcceptedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.action_import_bulk_with_http_info(list_id, import_bulk_request, **kwargs)  # noqa: E501

    def action_import_bulk_with_http_info(self, list_id, import_bulk_request, **kwargs):  # noqa: E501
        """Import collection of contacts  # noqa: E501

        Imports a collection of contacts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_import_bulk_with_http_info(list_id, import_bulk_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int list_id: ID of the List (required)
        :param ImportBulkRequest import_bulk_request: Parameters for the bulk import (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AcceptedResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['list_id', 'import_bulk_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method action_import_bulk" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'list_id' is set
        if self.api_client.client_side_validation and ('list_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['list_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `list_id` when calling `action_import_bulk`")  # noqa: E501
        # verify the required parameter 'import_bulk_request' is set
        if self.api_client.client_side_validation and ('import_bulk_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['import_bulk_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `import_bulk_request` when calling `action_import_bulk`")  # noqa: E501

        if self.api_client.client_side_validation and 'list_id' in local_var_params and local_var_params['list_id'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `list_id` when calling `action_import_bulk`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'list_id' in local_var_params:
            path_params['list_id'] = local_var_params['list_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'import_bulk_request' in local_var_params:
            body_params = local_var_params['import_bulk_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Apikey']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/contacts/actions/import-bulk', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AcceptedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def action_start_automation(self, list_id, start_automation_request, **kwargs):  # noqa: E501
        """Start automation  # noqa: E501

        Start automation to the provided contacts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_start_automation(list_id, start_automation_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int list_id: ID of the List (required)
        :param StartAutomationRequest start_automation_request: Parameters for the operation to start automation (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: StartAutomationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.action_start_automation_with_http_info(list_id, start_automation_request, **kwargs)  # noqa: E501

    def action_start_automation_with_http_info(self, list_id, start_automation_request, **kwargs):  # noqa: E501
        """Start automation  # noqa: E501

        Start automation to the provided contacts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_start_automation_with_http_info(list_id, start_automation_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int list_id: ID of the List (required)
        :param StartAutomationRequest start_automation_request: Parameters for the operation to start automation (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(StartAutomationResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['list_id', 'start_automation_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method action_start_automation" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'list_id' is set
        if self.api_client.client_side_validation and ('list_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['list_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `list_id` when calling `action_start_automation`")  # noqa: E501
        # verify the required parameter 'start_automation_request' is set
        if self.api_client.client_side_validation and ('start_automation_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['start_automation_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `start_automation_request` when calling `action_start_automation`")  # noqa: E501

        if self.api_client.client_side_validation and 'list_id' in local_var_params and local_var_params['list_id'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `list_id` when calling `action_start_automation`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'list_id' in local_var_params:
            path_params['list_id'] = local_var_params['list_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'start_automation_request' in local_var_params:
            body_params = local_var_params['start_automation_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Apikey']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/contacts/actions/start-automation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StartAutomationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def action_unsubscribe_contact(self, list_id, remove_request, **kwargs):  # noqa: E501
        """Unsubscribes contacts  # noqa: E501

        Unsubscribes contacts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_unsubscribe_contact(list_id, remove_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int list_id: ID of the List (required)
        :param RemoveRequest remove_request: Parameters for the contact to unsubscribe (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: RemoveResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.action_unsubscribe_contact_with_http_info(list_id, remove_request, **kwargs)  # noqa: E501

    def action_unsubscribe_contact_with_http_info(self, list_id, remove_request, **kwargs):  # noqa: E501
        """Unsubscribes contacts  # noqa: E501

        Unsubscribes contacts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_unsubscribe_contact_with_http_info(list_id, remove_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int list_id: ID of the List (required)
        :param RemoveRequest remove_request: Parameters for the contact to unsubscribe (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(RemoveResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['list_id', 'remove_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method action_unsubscribe_contact" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'list_id' is set
        if self.api_client.client_side_validation and ('list_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['list_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `list_id` when calling `action_unsubscribe_contact`")  # noqa: E501
        # verify the required parameter 'remove_request' is set
        if self.api_client.client_side_validation and ('remove_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['remove_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `remove_request` when calling `action_unsubscribe_contact`")  # noqa: E501

        if self.api_client.client_side_validation and 'list_id' in local_var_params and local_var_params['list_id'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `list_id` when calling `action_unsubscribe_contact`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'list_id' in local_var_params:
            path_params['list_id'] = local_var_params['list_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'remove_request' in local_var_params:
            body_params = local_var_params['remove_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Apikey']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/contacts/actions/unsubscribe', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RemoveResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_contact(self, list_id, contact_base_extra, **kwargs):  # noqa: E501
        """Create new contact  # noqa: E501

        Create a new contact  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_contact(list_id, contact_base_extra, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int list_id: ID of the list where the contact belongs (required)
        :param ContactBaseExtra contact_base_extra: Parameters for the Contact (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: CreateContactResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_contact_with_http_info(list_id, contact_base_extra, **kwargs)  # noqa: E501

    def create_contact_with_http_info(self, list_id, contact_base_extra, **kwargs):  # noqa: E501
        """Create new contact  # noqa: E501

        Create a new contact  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_contact_with_http_info(list_id, contact_base_extra, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int list_id: ID of the list where the contact belongs (required)
        :param ContactBaseExtra contact_base_extra: Parameters for the Contact (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(CreateContactResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['list_id', 'contact_base_extra']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_contact" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'list_id' is set
        if self.api_client.client_side_validation and ('list_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['list_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `list_id` when calling `create_contact`")  # noqa: E501
        # verify the required parameter 'contact_base_extra' is set
        if self.api_client.client_side_validation and ('contact_base_extra' not in local_var_params or  # noqa: E501
                                                        local_var_params['contact_base_extra'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `contact_base_extra` when calling `create_contact`")  # noqa: E501

        if self.api_client.client_side_validation and 'list_id' in local_var_params and local_var_params['list_id'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `list_id` when calling `create_contact`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'list_id' in local_var_params:
            path_params['list_id'] = local_var_params['list_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'contact_base_extra' in local_var_params:
            body_params = local_var_params['contact_base_extra']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Apikey']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/contacts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateContactResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_contact_activities(self, contact_id, list_id, **kwargs):  # noqa: E501
        """Get all contact activities  # noqa: E501

        Returns all contact activities  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_contact_activities(contact_id, list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str contact_id: ID of the Contact (required)
        :param int list_id: ID of the List (required)
        :param int offset: Element offset (starting at zero for the first element)
        :param int limit: Number of items to return
        :param datetime date_min: Start date
        :param datetime date_max: End date
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ActivityCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_all_contact_activities_with_http_info(contact_id, list_id, **kwargs)  # noqa: E501

    def get_all_contact_activities_with_http_info(self, contact_id, list_id, **kwargs):  # noqa: E501
        """Get all contact activities  # noqa: E501

        Returns all contact activities  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_contact_activities_with_http_info(contact_id, list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str contact_id: ID of the Contact (required)
        :param int list_id: ID of the List (required)
        :param int offset: Element offset (starting at zero for the first element)
        :param int limit: Number of items to return
        :param datetime date_min: Start date
        :param datetime date_max: End date
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ActivityCollection, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['contact_id', 'list_id', 'offset', 'limit', 'date_min', 'date_max']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_contact_activities" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'contact_id' is set
        if self.api_client.client_side_validation and ('contact_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['contact_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `contact_id` when calling `get_all_contact_activities`")  # noqa: E501
        # verify the required parameter 'list_id' is set
        if self.api_client.client_side_validation and ('list_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['list_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `list_id` when calling `get_all_contact_activities`")  # noqa: E501

        if self.api_client.client_side_validation and 'contact_id' in local_var_params and not re.search(r'[a-fA-F\d]{10}', local_var_params['contact_id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `contact_id` when calling `get_all_contact_activities`, must conform to the pattern `/[a-fA-F\d]{10}/`")  # noqa: E501
        if self.api_client.client_side_validation and 'list_id' in local_var_params and local_var_params['list_id'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `list_id` when calling `get_all_contact_activities`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'offset' in local_var_params and local_var_params['offset'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `offset` when calling `get_all_contact_activities`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] > 100:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `get_all_contact_activities`, must be a value less than or equal to `100`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `get_all_contact_activities`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'contact_id' in local_var_params:
            path_params['contact_id'] = local_var_params['contact_id']  # noqa: E501
        if 'list_id' in local_var_params:
            path_params['list_id'] = local_var_params['list_id']  # noqa: E501

        query_params = []
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'date_min' in local_var_params and local_var_params['date_min'] is not None:  # noqa: E501
            query_params.append(('date_min', local_var_params['date_min']))  # noqa: E501
        if 'date_max' in local_var_params and local_var_params['date_max'] is not None:  # noqa: E501
            query_params.append(('date_max', local_var_params['date_max']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Apikey']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/contacts/{contact_id}/activities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ActivityCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_contacts(self, list_id, **kwargs):  # noqa: E501
        """Get all contacts  # noqa: E501

        Returns all contacts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_contacts(list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int list_id: ID of the List (required)
        :param int offset: Element offset (starting at zero for the first element)
        :param int limit: Number of items to return
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ContactCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_all_contacts_with_http_info(list_id, **kwargs)  # noqa: E501

    def get_all_contacts_with_http_info(self, list_id, **kwargs):  # noqa: E501
        """Get all contacts  # noqa: E501

        Returns all contacts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_contacts_with_http_info(list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int list_id: ID of the List (required)
        :param int offset: Element offset (starting at zero for the first element)
        :param int limit: Number of items to return
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ContactCollection, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['list_id', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_contacts" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'list_id' is set
        if self.api_client.client_side_validation and ('list_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['list_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `list_id` when calling `get_all_contacts`")  # noqa: E501

        if self.api_client.client_side_validation and 'list_id' in local_var_params and local_var_params['list_id'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `list_id` when calling `get_all_contacts`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'offset' in local_var_params and local_var_params['offset'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `offset` when calling `get_all_contacts`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] > 100:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `get_all_contacts`, must be a value less than or equal to `100`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `get_all_contacts`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'list_id' in local_var_params:
            path_params['list_id'] = local_var_params['list_id']  # noqa: E501

        query_params = []
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Apikey']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/contacts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContactCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_contact(self, contact_id, list_id, **kwargs):  # noqa: E501
        """Get contact  # noqa: E501

        Returns contact information given its ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_contact(contact_id, list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str contact_id: ID of the Contact (required)
        :param int list_id: ID of the List (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ComplexContact
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_contact_with_http_info(contact_id, list_id, **kwargs)  # noqa: E501

    def get_contact_with_http_info(self, contact_id, list_id, **kwargs):  # noqa: E501
        """Get contact  # noqa: E501

        Returns contact information given its ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_contact_with_http_info(contact_id, list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str contact_id: ID of the Contact (required)
        :param int list_id: ID of the List (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ComplexContact, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['contact_id', 'list_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_contact" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'contact_id' is set
        if self.api_client.client_side_validation and ('contact_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['contact_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `contact_id` when calling `get_contact`")  # noqa: E501
        # verify the required parameter 'list_id' is set
        if self.api_client.client_side_validation and ('list_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['list_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `list_id` when calling `get_contact`")  # noqa: E501

        if self.api_client.client_side_validation and 'contact_id' in local_var_params and not re.search(r'[a-fA-F\d]{10}', local_var_params['contact_id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `contact_id` when calling `get_contact`, must conform to the pattern `/[a-fA-F\d]{10}/`")  # noqa: E501
        if self.api_client.client_side_validation and 'list_id' in local_var_params and local_var_params['list_id'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `list_id` when calling `get_contact`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'contact_id' in local_var_params:
            path_params['contact_id'] = local_var_params['contact_id']  # noqa: E501
        if 'list_id' in local_var_params:
            path_params['list_id'] = local_var_params['list_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Apikey']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/contacts/{contact_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComplexContact',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_contact(self, contact_id, list_id, contact_base_status_extra, **kwargs):  # noqa: E501
        """Update a specific contact  # noqa: E501

        Update contact  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_contact(contact_id, list_id, contact_base_status_extra, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str contact_id: ID of the Contact (required)
        :param int list_id: ID of the List (required)
        :param ContactBaseStatusExtra contact_base_status_extra: Parameters for the contact (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: CreateContactResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.patch_contact_with_http_info(contact_id, list_id, contact_base_status_extra, **kwargs)  # noqa: E501

    def patch_contact_with_http_info(self, contact_id, list_id, contact_base_status_extra, **kwargs):  # noqa: E501
        """Update a specific contact  # noqa: E501

        Update contact  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_contact_with_http_info(contact_id, list_id, contact_base_status_extra, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str contact_id: ID of the Contact (required)
        :param int list_id: ID of the List (required)
        :param ContactBaseStatusExtra contact_base_status_extra: Parameters for the contact (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(CreateContactResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['contact_id', 'list_id', 'contact_base_status_extra']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_contact" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'contact_id' is set
        if self.api_client.client_side_validation and ('contact_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['contact_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `contact_id` when calling `patch_contact`")  # noqa: E501
        # verify the required parameter 'list_id' is set
        if self.api_client.client_side_validation and ('list_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['list_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `list_id` when calling `patch_contact`")  # noqa: E501
        # verify the required parameter 'contact_base_status_extra' is set
        if self.api_client.client_side_validation and ('contact_base_status_extra' not in local_var_params or  # noqa: E501
                                                        local_var_params['contact_base_status_extra'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `contact_base_status_extra` when calling `patch_contact`")  # noqa: E501

        if self.api_client.client_side_validation and 'contact_id' in local_var_params and not re.search(r'[a-fA-F\d]{10}', local_var_params['contact_id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `contact_id` when calling `patch_contact`, must conform to the pattern `/[a-fA-F\d]{10}/`")  # noqa: E501
        if self.api_client.client_side_validation and 'list_id' in local_var_params and local_var_params['list_id'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `list_id` when calling `patch_contact`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'contact_id' in local_var_params:
            path_params['contact_id'] = local_var_params['contact_id']  # noqa: E501
        if 'list_id' in local_var_params:
            path_params['list_id'] = local_var_params['list_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'contact_base_status_extra' in local_var_params:
            body_params = local_var_params['contact_base_status_extra']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Apikey']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/contacts/{contact_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateContactResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
