# coding: utf-8

"""
    APIv3 (Beta)

     # Introduction Just a quick pick!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # HTTP Methods for RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  <security-definitions/>  # noqa: E501

    The version of the OpenAPI document: 3.0.0-beta
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from egoi-api.configuration import Configuration


class ComplexContact(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'base': 'ContactInsideBase',
        'extra': 'list[ContactExtraFields]',
        'tags': 'list[int]',
        'email_stats': 'ComplexContactAllOfEmailStats',
        'sms_stats': 'ComplexContactAllOfSmsStats',
        'push_stats': 'ComplexContactAllOfPushStats',
        'webpush_stats': 'ComplexContactAllOfWebpushStats',
        'voice_stats': 'ComplexContactAllOfVoiceStats'
    }

    attribute_map = {
        'base': 'base',
        'extra': 'extra',
        'tags': 'tags',
        'email_stats': 'email_stats',
        'sms_stats': 'sms_stats',
        'push_stats': 'push_stats',
        'webpush_stats': 'webpush_stats',
        'voice_stats': 'voice_stats'
    }

    def __init__(self, base=None, extra=None, tags=None, email_stats=None, sms_stats=None, push_stats=None, webpush_stats=None, voice_stats=None, local_vars_configuration=None):  # noqa: E501
        """ComplexContact - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._base = None
        self._extra = None
        self._tags = None
        self._email_stats = None
        self._sms_stats = None
        self._push_stats = None
        self._webpush_stats = None
        self._voice_stats = None
        self.discriminator = None

        if base is not None:
            self.base = base
        if extra is not None:
            self.extra = extra
        if tags is not None:
            self.tags = tags
        if email_stats is not None:
            self.email_stats = email_stats
        if sms_stats is not None:
            self.sms_stats = sms_stats
        if push_stats is not None:
            self.push_stats = push_stats
        if webpush_stats is not None:
            self.webpush_stats = webpush_stats
        if voice_stats is not None:
            self.voice_stats = voice_stats

    @property
    def base(self):
        """Gets the base of this ComplexContact.  # noqa: E501

        Contact base fields  # noqa: E501

        :return: The base of this ComplexContact.  # noqa: E501
        :rtype: ContactInsideBase
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this ComplexContact.

        Contact base fields  # noqa: E501

        :param base: The base of this ComplexContact.  # noqa: E501
        :type: ContactInsideBase
        """

        self._base = base

    @property
    def extra(self):
        """Gets the extra of this ComplexContact.  # noqa: E501

        Array of the contact's extra fields  # noqa: E501

        :return: The extra of this ComplexContact.  # noqa: E501
        :rtype: list[ContactExtraFields]
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this ComplexContact.

        Array of the contact's extra fields  # noqa: E501

        :param extra: The extra of this ComplexContact.  # noqa: E501
        :type: list[ContactExtraFields]
        """

        self._extra = extra

    @property
    def tags(self):
        """Gets the tags of this ComplexContact.  # noqa: E501

        Array of tags for this contact  # noqa: E501

        :return: The tags of this ComplexContact.  # noqa: E501
        :rtype: list[int]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ComplexContact.

        Array of tags for this contact  # noqa: E501

        :param tags: The tags of this ComplexContact.  # noqa: E501
        :type: list[int]
        """

        self._tags = tags

    @property
    def email_stats(self):
        """Gets the email_stats of this ComplexContact.  # noqa: E501


        :return: The email_stats of this ComplexContact.  # noqa: E501
        :rtype: ComplexContactAllOfEmailStats
        """
        return self._email_stats

    @email_stats.setter
    def email_stats(self, email_stats):
        """Sets the email_stats of this ComplexContact.


        :param email_stats: The email_stats of this ComplexContact.  # noqa: E501
        :type: ComplexContactAllOfEmailStats
        """

        self._email_stats = email_stats

    @property
    def sms_stats(self):
        """Gets the sms_stats of this ComplexContact.  # noqa: E501


        :return: The sms_stats of this ComplexContact.  # noqa: E501
        :rtype: ComplexContactAllOfSmsStats
        """
        return self._sms_stats

    @sms_stats.setter
    def sms_stats(self, sms_stats):
        """Sets the sms_stats of this ComplexContact.


        :param sms_stats: The sms_stats of this ComplexContact.  # noqa: E501
        :type: ComplexContactAllOfSmsStats
        """

        self._sms_stats = sms_stats

    @property
    def push_stats(self):
        """Gets the push_stats of this ComplexContact.  # noqa: E501


        :return: The push_stats of this ComplexContact.  # noqa: E501
        :rtype: ComplexContactAllOfPushStats
        """
        return self._push_stats

    @push_stats.setter
    def push_stats(self, push_stats):
        """Sets the push_stats of this ComplexContact.


        :param push_stats: The push_stats of this ComplexContact.  # noqa: E501
        :type: ComplexContactAllOfPushStats
        """

        self._push_stats = push_stats

    @property
    def webpush_stats(self):
        """Gets the webpush_stats of this ComplexContact.  # noqa: E501


        :return: The webpush_stats of this ComplexContact.  # noqa: E501
        :rtype: ComplexContactAllOfWebpushStats
        """
        return self._webpush_stats

    @webpush_stats.setter
    def webpush_stats(self, webpush_stats):
        """Sets the webpush_stats of this ComplexContact.


        :param webpush_stats: The webpush_stats of this ComplexContact.  # noqa: E501
        :type: ComplexContactAllOfWebpushStats
        """

        self._webpush_stats = webpush_stats

    @property
    def voice_stats(self):
        """Gets the voice_stats of this ComplexContact.  # noqa: E501


        :return: The voice_stats of this ComplexContact.  # noqa: E501
        :rtype: ComplexContactAllOfVoiceStats
        """
        return self._voice_stats

    @voice_stats.setter
    def voice_stats(self, voice_stats):
        """Sets the voice_stats of this ComplexContact.


        :param voice_stats: The voice_stats of this ComplexContact.  # noqa: E501
        :type: ComplexContactAllOfVoiceStats
        """

        self._voice_stats = voice_stats

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComplexContact):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComplexContact):
            return True

        return self.to_dict() != other.to_dict()
