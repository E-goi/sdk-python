# coding: utf-8

"""
    APIv3 (Beta)

     # Introduction Just a quick peek!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  # SDK Get started quickly with E-goi with our integration tools. Our SDK is a modern open source library that makes it easy to integrate your application with E-goi services. * <b><a href='https://github.com/E-goi/sdk-java'>Java</a></b> * <b><a href='https://github.com/E-goi/sdk-php'>PHP</a></b> * <b><a href='https://github.com/E-goi/sdk-python'>Python</a></b>  <security-definitions/>  # noqa: E501

    The version of the OpenAPI document: 3.0.0-beta
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from egoi-api.configuration import Configuration


class ComplexContactAllOfWebpushStats(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'sent': 'int',
        'delivered': 'int',
        'clicks': 'int',
        'bounces': 'int',
        'last_send_date': 'datetime',
        'last_delivery_date': 'datetime',
        'last_click_date': 'datetime',
        'last_bounce_date': 'datetime'
    }

    attribute_map = {
        'sent': 'sent',
        'delivered': 'delivered',
        'clicks': 'clicks',
        'bounces': 'bounces',
        'last_send_date': 'last_send_date',
        'last_delivery_date': 'last_delivery_date',
        'last_click_date': 'last_click_date',
        'last_bounce_date': 'last_bounce_date'
    }

    def __init__(self, sent=None, delivered=None, clicks=None, bounces=None, last_send_date=None, last_delivery_date=None, last_click_date=None, last_bounce_date=None, local_vars_configuration=None):  # noqa: E501
        """ComplexContactAllOfWebpushStats - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._sent = None
        self._delivered = None
        self._clicks = None
        self._bounces = None
        self._last_send_date = None
        self._last_delivery_date = None
        self._last_click_date = None
        self._last_bounce_date = None
        self.discriminator = None

        if sent is not None:
            self.sent = sent
        if delivered is not None:
            self.delivered = delivered
        if clicks is not None:
            self.clicks = clicks
        if bounces is not None:
            self.bounces = bounces
        if last_send_date is not None:
            self.last_send_date = last_send_date
        if last_delivery_date is not None:
            self.last_delivery_date = last_delivery_date
        if last_click_date is not None:
            self.last_click_date = last_click_date
        if last_bounce_date is not None:
            self.last_bounce_date = last_bounce_date

    @property
    def sent(self):
        """Gets the sent of this ComplexContactAllOfWebpushStats.  # noqa: E501

        Webpush messages sent to the contact  # noqa: E501

        :return: The sent of this ComplexContactAllOfWebpushStats.  # noqa: E501
        :rtype: int
        """
        return self._sent

    @sent.setter
    def sent(self, sent):
        """Sets the sent of this ComplexContactAllOfWebpushStats.

        Webpush messages sent to the contact  # noqa: E501

        :param sent: The sent of this ComplexContactAllOfWebpushStats.  # noqa: E501
        :type: int
        """

        self._sent = sent

    @property
    def delivered(self):
        """Gets the delivered of this ComplexContactAllOfWebpushStats.  # noqa: E501

        Webpush messages delivered to the contact  # noqa: E501

        :return: The delivered of this ComplexContactAllOfWebpushStats.  # noqa: E501
        :rtype: int
        """
        return self._delivered

    @delivered.setter
    def delivered(self, delivered):
        """Sets the delivered of this ComplexContactAllOfWebpushStats.

        Webpush messages delivered to the contact  # noqa: E501

        :param delivered: The delivered of this ComplexContactAllOfWebpushStats.  # noqa: E501
        :type: int
        """

        self._delivered = delivered

    @property
    def clicks(self):
        """Gets the clicks of this ComplexContactAllOfWebpushStats.  # noqa: E501

        Total number of clicks made by the contact  # noqa: E501

        :return: The clicks of this ComplexContactAllOfWebpushStats.  # noqa: E501
        :rtype: int
        """
        return self._clicks

    @clicks.setter
    def clicks(self, clicks):
        """Sets the clicks of this ComplexContactAllOfWebpushStats.

        Total number of clicks made by the contact  # noqa: E501

        :param clicks: The clicks of this ComplexContactAllOfWebpushStats.  # noqa: E501
        :type: int
        """

        self._clicks = clicks

    @property
    def bounces(self):
        """Gets the bounces of this ComplexContactAllOfWebpushStats.  # noqa: E501

        Bounces for the contact  # noqa: E501

        :return: The bounces of this ComplexContactAllOfWebpushStats.  # noqa: E501
        :rtype: int
        """
        return self._bounces

    @bounces.setter
    def bounces(self, bounces):
        """Sets the bounces of this ComplexContactAllOfWebpushStats.

        Bounces for the contact  # noqa: E501

        :param bounces: The bounces of this ComplexContactAllOfWebpushStats.  # noqa: E501
        :type: int
        """

        self._bounces = bounces

    @property
    def last_send_date(self):
        """Gets the last_send_date of this ComplexContactAllOfWebpushStats.  # noqa: E501

        Date of the last webpush message sent to the contact  # noqa: E501

        :return: The last_send_date of this ComplexContactAllOfWebpushStats.  # noqa: E501
        :rtype: datetime
        """
        return self._last_send_date

    @last_send_date.setter
    def last_send_date(self, last_send_date):
        """Sets the last_send_date of this ComplexContactAllOfWebpushStats.

        Date of the last webpush message sent to the contact  # noqa: E501

        :param last_send_date: The last_send_date of this ComplexContactAllOfWebpushStats.  # noqa: E501
        :type: datetime
        """

        self._last_send_date = last_send_date

    @property
    def last_delivery_date(self):
        """Gets the last_delivery_date of this ComplexContactAllOfWebpushStats.  # noqa: E501

        Date of the last webpush message delivered to the contact  # noqa: E501

        :return: The last_delivery_date of this ComplexContactAllOfWebpushStats.  # noqa: E501
        :rtype: datetime
        """
        return self._last_delivery_date

    @last_delivery_date.setter
    def last_delivery_date(self, last_delivery_date):
        """Sets the last_delivery_date of this ComplexContactAllOfWebpushStats.

        Date of the last webpush message delivered to the contact  # noqa: E501

        :param last_delivery_date: The last_delivery_date of this ComplexContactAllOfWebpushStats.  # noqa: E501
        :type: datetime
        """

        self._last_delivery_date = last_delivery_date

    @property
    def last_click_date(self):
        """Gets the last_click_date of this ComplexContactAllOfWebpushStats.  # noqa: E501

        Date of the last webpush message clicked by the contact  # noqa: E501

        :return: The last_click_date of this ComplexContactAllOfWebpushStats.  # noqa: E501
        :rtype: datetime
        """
        return self._last_click_date

    @last_click_date.setter
    def last_click_date(self, last_click_date):
        """Sets the last_click_date of this ComplexContactAllOfWebpushStats.

        Date of the last webpush message clicked by the contact  # noqa: E501

        :param last_click_date: The last_click_date of this ComplexContactAllOfWebpushStats.  # noqa: E501
        :type: datetime
        """

        self._last_click_date = last_click_date

    @property
    def last_bounce_date(self):
        """Gets the last_bounce_date of this ComplexContactAllOfWebpushStats.  # noqa: E501

        Date of the last webpush bounce for the contact  # noqa: E501

        :return: The last_bounce_date of this ComplexContactAllOfWebpushStats.  # noqa: E501
        :rtype: datetime
        """
        return self._last_bounce_date

    @last_bounce_date.setter
    def last_bounce_date(self, last_bounce_date):
        """Sets the last_bounce_date of this ComplexContactAllOfWebpushStats.

        Date of the last webpush bounce for the contact  # noqa: E501

        :param last_bounce_date: The last_bounce_date of this ComplexContactAllOfWebpushStats.  # noqa: E501
        :type: datetime
        """

        self._last_bounce_date = last_bounce_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComplexContactAllOfWebpushStats):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComplexContactAllOfWebpushStats):
            return True

        return self.to_dict() != other.to_dict()
