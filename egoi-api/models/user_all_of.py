# coding: utf-8

"""
    APIv3 (Beta)

     # Introduction Just a quick peek!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  # SDK Get started quickly with E-goi with our integration tools. Our SDK is a modern open source library that makes it easy to integrate your application with E-goi services. * <b><a href='https://github.com/E-goi/sdk-java'>Java</a></b> * <b><a href='https://github.com/E-goi/sdk-php'>PHP</a></b> * <b><a href='https://github.com/E-goi/sdk-python'>Python</a></b>  <security-definitions/>  # noqa: E501

    The version of the OpenAPI document: 3.0.0-beta
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from egoi-api.configuration import Configuration


class UserAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'user_id': 'int',
        'username': 'str',
        'is_admin': 'bool',
        'first_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'phone': 'str',
        'profile_image': 'str',
        'status': 'str',
        'created': 'datetime',
        'updated': 'datetime'
    }

    attribute_map = {
        'user_id': 'user_id',
        'username': 'username',
        'is_admin': 'is_admin',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'email': 'email',
        'phone': 'phone',
        'profile_image': 'profile_image',
        'status': 'status',
        'created': 'created',
        'updated': 'updated'
    }

    def __init__(self, user_id=None, username=None, is_admin=False, first_name=None, last_name=None, email=None, phone=None, profile_image=None, status=None, created=None, updated=None, local_vars_configuration=None):  # noqa: E501
        """UserAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._user_id = None
        self._username = None
        self._is_admin = None
        self._first_name = None
        self._last_name = None
        self._email = None
        self._phone = None
        self._profile_image = None
        self._status = None
        self._created = None
        self._updated = None
        self.discriminator = None

        if user_id is not None:
            self.user_id = user_id
        if username is not None:
            self.username = username
        if is_admin is not None:
            self.is_admin = is_admin
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if email is not None:
            self.email = email
        if phone is not None:
            self.phone = phone
        if profile_image is not None:
            self.profile_image = profile_image
        if status is not None:
            self.status = status
        if created is not None:
            self.created = created
        if updated is not None:
            self.updated = updated

    @property
    def user_id(self):
        """Gets the user_id of this UserAllOf.  # noqa: E501


        :return: The user_id of this UserAllOf.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserAllOf.


        :param user_id: The user_id of this UserAllOf.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                user_id is not None and user_id < 1):  # noqa: E501
            raise ValueError("Invalid value for `user_id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._user_id = user_id

    @property
    def username(self):
        """Gets the username of this UserAllOf.  # noqa: E501

        User login  # noqa: E501

        :return: The username of this UserAllOf.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserAllOf.

        User login  # noqa: E501

        :param username: The username of this UserAllOf.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def is_admin(self):
        """Gets the is_admin of this UserAllOf.  # noqa: E501

        True if user is admin, false otherwise  # noqa: E501

        :return: The is_admin of this UserAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this UserAllOf.

        True if user is admin, false otherwise  # noqa: E501

        :param is_admin: The is_admin of this UserAllOf.  # noqa: E501
        :type: bool
        """

        self._is_admin = is_admin

    @property
    def first_name(self):
        """Gets the first_name of this UserAllOf.  # noqa: E501

        First name of the user  # noqa: E501

        :return: The first_name of this UserAllOf.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserAllOf.

        First name of the user  # noqa: E501

        :param first_name: The first_name of this UserAllOf.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UserAllOf.  # noqa: E501

        Last name of the user  # noqa: E501

        :return: The last_name of this UserAllOf.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserAllOf.

        Last name of the user  # noqa: E501

        :param last_name: The last_name of this UserAllOf.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this UserAllOf.  # noqa: E501

        Email of the user  # noqa: E501

        :return: The email of this UserAllOf.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserAllOf.

        Email of the user  # noqa: E501

        :param email: The email of this UserAllOf.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def phone(self):
        """Gets the phone of this UserAllOf.  # noqa: E501

        User's phone (may be cellphone or phone)  # noqa: E501

        :return: The phone of this UserAllOf.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this UserAllOf.

        User's phone (may be cellphone or phone)  # noqa: E501

        :param phone: The phone of this UserAllOf.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def profile_image(self):
        """Gets the profile_image of this UserAllOf.  # noqa: E501

        User's profile image  # noqa: E501

        :return: The profile_image of this UserAllOf.  # noqa: E501
        :rtype: str
        """
        return self._profile_image

    @profile_image.setter
    def profile_image(self, profile_image):
        """Sets the profile_image of this UserAllOf.

        User's profile image  # noqa: E501

        :param profile_image: The profile_image of this UserAllOf.  # noqa: E501
        :type: str
        """

        self._profile_image = profile_image

    @property
    def status(self):
        """Gets the status of this UserAllOf.  # noqa: E501

        User status  # noqa: E501

        :return: The status of this UserAllOf.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UserAllOf.

        User status  # noqa: E501

        :param status: The status of this UserAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = ["active", "inactive"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def created(self):
        """Gets the created of this UserAllOf.  # noqa: E501

        The date and time  # noqa: E501

        :return: The created of this UserAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this UserAllOf.

        The date and time  # noqa: E501

        :param created: The created of this UserAllOf.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this UserAllOf.  # noqa: E501

        The date and time  # noqa: E501

        :return: The updated of this UserAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this UserAllOf.

        The date and time  # noqa: E501

        :param updated: The updated of this UserAllOf.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserAllOf):
            return True

        return self.to_dict() != other.to_dict()
