# coding: utf-8

"""
    APIv3 (Beta)

     # Introduction Just a quick pick!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # HTTP Methods for RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  <security-definitions/>  # noqa: E501

    The version of the OpenAPI document: 3.0.0-beta
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from egoi-api.configuration import Configuration


class EmailCampaignTemplateAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'sender_data': 'EmailCampaignTemplateAllOfSenderData',
        'image': 'str',
        'message_html_version': 'str',
        'message_text_version': 'str',
        'reply_to_data': 'EmailCampaignTemplateAllOfReplyToData'
    }

    attribute_map = {
        'sender_data': 'sender_data',
        'image': 'image',
        'message_html_version': 'message_html_version',
        'message_text_version': 'message_text_version',
        'reply_to_data': 'reply_to_data'
    }

    def __init__(self, sender_data=None, image=None, message_html_version=None, message_text_version=None, reply_to_data=None, local_vars_configuration=None):  # noqa: E501
        """EmailCampaignTemplateAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._sender_data = None
        self._image = None
        self._message_html_version = None
        self._message_text_version = None
        self._reply_to_data = None
        self.discriminator = None

        if sender_data is not None:
            self.sender_data = sender_data
        if image is not None:
            self.image = image
        if message_html_version is not None:
            self.message_html_version = message_html_version
        if message_text_version is not None:
            self.message_text_version = message_text_version
        if reply_to_data is not None:
            self.reply_to_data = reply_to_data

    @property
    def sender_data(self):
        """Gets the sender_data of this EmailCampaignTemplateAllOf.  # noqa: E501


        :return: The sender_data of this EmailCampaignTemplateAllOf.  # noqa: E501
        :rtype: EmailCampaignTemplateAllOfSenderData
        """
        return self._sender_data

    @sender_data.setter
    def sender_data(self, sender_data):
        """Sets the sender_data of this EmailCampaignTemplateAllOf.


        :param sender_data: The sender_data of this EmailCampaignTemplateAllOf.  # noqa: E501
        :type: EmailCampaignTemplateAllOfSenderData
        """

        self._sender_data = sender_data

    @property
    def image(self):
        """Gets the image of this EmailCampaignTemplateAllOf.  # noqa: E501

        Template image  # noqa: E501

        :return: The image of this EmailCampaignTemplateAllOf.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this EmailCampaignTemplateAllOf.

        Template image  # noqa: E501

        :param image: The image of this EmailCampaignTemplateAllOf.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def message_html_version(self):
        """Gets the message_html_version of this EmailCampaignTemplateAllOf.  # noqa: E501

        Html message  # noqa: E501

        :return: The message_html_version of this EmailCampaignTemplateAllOf.  # noqa: E501
        :rtype: str
        """
        return self._message_html_version

    @message_html_version.setter
    def message_html_version(self, message_html_version):
        """Sets the message_html_version of this EmailCampaignTemplateAllOf.

        Html message  # noqa: E501

        :param message_html_version: The message_html_version of this EmailCampaignTemplateAllOf.  # noqa: E501
        :type: str
        """

        self._message_html_version = message_html_version

    @property
    def message_text_version(self):
        """Gets the message_text_version of this EmailCampaignTemplateAllOf.  # noqa: E501

        Text message  # noqa: E501

        :return: The message_text_version of this EmailCampaignTemplateAllOf.  # noqa: E501
        :rtype: str
        """
        return self._message_text_version

    @message_text_version.setter
    def message_text_version(self, message_text_version):
        """Sets the message_text_version of this EmailCampaignTemplateAllOf.

        Text message  # noqa: E501

        :param message_text_version: The message_text_version of this EmailCampaignTemplateAllOf.  # noqa: E501
        :type: str
        """

        self._message_text_version = message_text_version

    @property
    def reply_to_data(self):
        """Gets the reply_to_data of this EmailCampaignTemplateAllOf.  # noqa: E501


        :return: The reply_to_data of this EmailCampaignTemplateAllOf.  # noqa: E501
        :rtype: EmailCampaignTemplateAllOfReplyToData
        """
        return self._reply_to_data

    @reply_to_data.setter
    def reply_to_data(self, reply_to_data):
        """Sets the reply_to_data of this EmailCampaignTemplateAllOf.


        :param reply_to_data: The reply_to_data of this EmailCampaignTemplateAllOf.  # noqa: E501
        :type: EmailCampaignTemplateAllOfReplyToData
        """

        self._reply_to_data = reply_to_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailCampaignTemplateAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EmailCampaignTemplateAllOf):
            return True

        return self.to_dict() != other.to_dict()
