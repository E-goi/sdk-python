# coding: utf-8

"""
    APIv3 (Beta)

     # Introduction Just a quick pick!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # HTTP Methods for RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  <security-definitions/>  # noqa: E501

    The version of the OpenAPI document: 3.0.0-beta
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from egoi-api.configuration import Configuration


class CampaignEmailContent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'body': 'str',
        'plain_text': 'str',
        'snippet': 'str',
        'template_id': 'int',
        'url': 'str',
        'use_page_title': 'bool',
        'file': 'str'
    }

    attribute_map = {
        'type': 'type',
        'body': 'body',
        'plain_text': 'plain_text',
        'snippet': 'snippet',
        'template_id': 'template_id',
        'url': 'url',
        'use_page_title': 'use_page_title',
        'file': 'file'
    }

    discriminator_value_class_map = {
        
    }

    def __init__(self, type=None, body=None, plain_text=None, snippet=None, template_id=None, url=None, use_page_title=False, file=None, local_vars_configuration=None):  # noqa: E501
        """CampaignEmailContent - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._body = None
        self._plain_text = None
        self._snippet = None
        self._template_id = None
        self._url = None
        self._use_page_title = None
        self._file = None
        self.discriminator = 'type'

        self.type = type
        self.body = body
        if plain_text is not None:
            self.plain_text = plain_text
        if snippet is not None:
            self.snippet = snippet
        self.template_id = template_id
        self.url = url
        if use_page_title is not None:
            self.use_page_title = use_page_title
        self.file = file

    @property
    def type(self):
        """Gets the type of this CampaignEmailContent.  # noqa: E501


        :return: The type of this CampaignEmailContent.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CampaignEmailContent.


        :param type: The type of this CampaignEmailContent.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["file"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def body(self):
        """Gets the body of this CampaignEmailContent.  # noqa: E501

        HTML code of the campaign  # noqa: E501

        :return: The body of this CampaignEmailContent.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this CampaignEmailContent.

        HTML code of the campaign  # noqa: E501

        :param body: The body of this CampaignEmailContent.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and body is None:  # noqa: E501
            raise ValueError("Invalid value for `body`, must not be `None`")  # noqa: E501

        self._body = body

    @property
    def plain_text(self):
        """Gets the plain_text of this CampaignEmailContent.  # noqa: E501

        Plain text for the campaign  # noqa: E501

        :return: The plain_text of this CampaignEmailContent.  # noqa: E501
        :rtype: str
        """
        return self._plain_text

    @plain_text.setter
    def plain_text(self, plain_text):
        """Sets the plain_text of this CampaignEmailContent.

        Plain text for the campaign  # noqa: E501

        :param plain_text: The plain_text of this CampaignEmailContent.  # noqa: E501
        :type: str
        """

        self._plain_text = plain_text

    @property
    def snippet(self):
        """Gets the snippet of this CampaignEmailContent.  # noqa: E501

        Snippet text for the campaign  # noqa: E501

        :return: The snippet of this CampaignEmailContent.  # noqa: E501
        :rtype: str
        """
        return self._snippet

    @snippet.setter
    def snippet(self, snippet):
        """Sets the snippet of this CampaignEmailContent.

        Snippet text for the campaign  # noqa: E501

        :param snippet: The snippet of this CampaignEmailContent.  # noqa: E501
        :type: str
        """

        self._snippet = snippet

    @property
    def template_id(self):
        """Gets the template_id of this CampaignEmailContent.  # noqa: E501

        ID of the template for this campaign  # noqa: E501

        :return: The template_id of this CampaignEmailContent.  # noqa: E501
        :rtype: int
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this CampaignEmailContent.

        ID of the template for this campaign  # noqa: E501

        :param template_id: The template_id of this CampaignEmailContent.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and template_id is None:  # noqa: E501
            raise ValueError("Invalid value for `template_id`, must not be `None`")  # noqa: E501

        self._template_id = template_id

    @property
    def url(self):
        """Gets the url of this CampaignEmailContent.  # noqa: E501

        Campaign url  # noqa: E501

        :return: The url of this CampaignEmailContent.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CampaignEmailContent.

        Campaign url  # noqa: E501

        :param url: The url of this CampaignEmailContent.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and url is None:  # noqa: E501
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def use_page_title(self):
        """Gets the use_page_title of this CampaignEmailContent.  # noqa: E501

        True to use page title as the campaign title  # noqa: E501

        :return: The use_page_title of this CampaignEmailContent.  # noqa: E501
        :rtype: bool
        """
        return self._use_page_title

    @use_page_title.setter
    def use_page_title(self, use_page_title):
        """Sets the use_page_title of this CampaignEmailContent.

        True to use page title as the campaign title  # noqa: E501

        :param use_page_title: The use_page_title of this CampaignEmailContent.  # noqa: E501
        :type: bool
        """

        self._use_page_title = use_page_title

    @property
    def file(self):
        """Gets the file of this CampaignEmailContent.  # noqa: E501

        Campaign file  # noqa: E501

        :return: The file of this CampaignEmailContent.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this CampaignEmailContent.

        Campaign file  # noqa: E501

        :param file: The file of this CampaignEmailContent.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and file is None:  # noqa: E501
            raise ValueError("Invalid value for `file`, must not be `None`")  # noqa: E501

        self._file = file

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CampaignEmailContent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CampaignEmailContent):
            return True

        return self.to_dict() != other.to_dict()
