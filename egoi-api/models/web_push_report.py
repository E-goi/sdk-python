# coding: utf-8

"""
    APIv3 (Beta)

     # Introduction Just a quick peek!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  # SDK Get started quickly with E-goi with our integration tools. Our SDK is a modern open source library that makes it easy to integrate your application with E-goi services.  * <a href='https://github.com/E-goi/sdk-java'>Java</a>  * <a href='https://github.com/E-goi/sdk-php'>PHP</a>  * <a href='https://github.com/E-goi/sdk-python'>Python</a>  * <a href='https://github.com/E-goi/sdk-ruby'>Ruby</a>  * <a href='https://github.com/E-goi/sdk-javascript'>Javascript</a>  * <a href='https://github.com/E-goi/sdk-csharp'>C#</a>  # Stream Limits Stream limits are security mesures we have to make sure our API have a fair use policy, for this reason, any request that creates or modifies data (**POST**, **PATCH** and **PUT**) is limited to a maximum of **20MB** of content length. If you arrive to this limit in one of your request, you'll receive a HTTP code **413 (Request Entity Too Large)** and the request will be ignored. To avoid this error in importation's requests, it's advised the request's division in batches that have each one less than 20MB. <security-definitions/>  # noqa: E501

    The version of the OpenAPI document: 3.0.0-beta
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from egoi-api.configuration import Configuration


class WebPushReport(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'campaign_hash': 'str',
        'overall': 'WebPushStats',
        'devices': 'list[object]',
        'operating_systems': 'list[WebPushReportOperatingSystems]',
        'browsers': 'list[WebPushReportBrowsers]',
        'url': 'list[object]'
    }

    attribute_map = {
        'campaign_hash': 'campaign_hash',
        'overall': 'overall',
        'devices': 'devices',
        'operating_systems': 'operating_systems',
        'browsers': 'browsers',
        'url': 'url'
    }

    def __init__(self, campaign_hash=None, overall=None, devices=None, operating_systems=None, browsers=None, url=None, local_vars_configuration=None):  # noqa: E501
        """WebPushReport - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._campaign_hash = None
        self._overall = None
        self._devices = None
        self._operating_systems = None
        self._browsers = None
        self._url = None
        self.discriminator = None

        if campaign_hash is not None:
            self.campaign_hash = campaign_hash
        if overall is not None:
            self.overall = overall
        if devices is not None:
            self.devices = devices
        if operating_systems is not None:
            self.operating_systems = operating_systems
        if browsers is not None:
            self.browsers = browsers
        if url is not None:
            self.url = url

    @property
    def campaign_hash(self):
        """Gets the campaign_hash of this WebPushReport.  # noqa: E501


        :return: The campaign_hash of this WebPushReport.  # noqa: E501
        :rtype: str
        """
        return self._campaign_hash

    @campaign_hash.setter
    def campaign_hash(self, campaign_hash):
        """Sets the campaign_hash of this WebPushReport.


        :param campaign_hash: The campaign_hash of this WebPushReport.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                campaign_hash is not None and not re.search(r'[a-zA-Z0-9_-]*', campaign_hash)):  # noqa: E501
            raise ValueError(r"Invalid value for `campaign_hash`, must be a follow pattern or equal to `/[a-zA-Z0-9_-]*/`")  # noqa: E501

        self._campaign_hash = campaign_hash

    @property
    def overall(self):
        """Gets the overall of this WebPushReport.  # noqa: E501


        :return: The overall of this WebPushReport.  # noqa: E501
        :rtype: WebPushStats
        """
        return self._overall

    @overall.setter
    def overall(self, overall):
        """Sets the overall of this WebPushReport.


        :param overall: The overall of this WebPushReport.  # noqa: E501
        :type: WebPushStats
        """

        self._overall = overall

    @property
    def devices(self):
        """Gets the devices of this WebPushReport.  # noqa: E501

        Stats of the campaign for each device  # noqa: E501

        :return: The devices of this WebPushReport.  # noqa: E501
        :rtype: list[object]
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this WebPushReport.

        Stats of the campaign for each device  # noqa: E501

        :param devices: The devices of this WebPushReport.  # noqa: E501
        :type: list[object]
        """

        self._devices = devices

    @property
    def operating_systems(self):
        """Gets the operating_systems of this WebPushReport.  # noqa: E501

        Stats of the campaign for each operating system  # noqa: E501

        :return: The operating_systems of this WebPushReport.  # noqa: E501
        :rtype: list[WebPushReportOperatingSystems]
        """
        return self._operating_systems

    @operating_systems.setter
    def operating_systems(self, operating_systems):
        """Sets the operating_systems of this WebPushReport.

        Stats of the campaign for each operating system  # noqa: E501

        :param operating_systems: The operating_systems of this WebPushReport.  # noqa: E501
        :type: list[WebPushReportOperatingSystems]
        """

        self._operating_systems = operating_systems

    @property
    def browsers(self):
        """Gets the browsers of this WebPushReport.  # noqa: E501

        Stats of the campaign for each browser  # noqa: E501

        :return: The browsers of this WebPushReport.  # noqa: E501
        :rtype: list[WebPushReportBrowsers]
        """
        return self._browsers

    @browsers.setter
    def browsers(self, browsers):
        """Sets the browsers of this WebPushReport.

        Stats of the campaign for each browser  # noqa: E501

        :param browsers: The browsers of this WebPushReport.  # noqa: E501
        :type: list[WebPushReportBrowsers]
        """

        self._browsers = browsers

    @property
    def url(self):
        """Gets the url of this WebPushReport.  # noqa: E501

        Stats of the campaign for each url  # noqa: E501

        :return: The url of this WebPushReport.  # noqa: E501
        :rtype: list[object]
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WebPushReport.

        Stats of the campaign for each url  # noqa: E501

        :param url: The url of this WebPushReport.  # noqa: E501
        :type: list[object]
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebPushReport):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WebPushReport):
            return True

        return self.to_dict() != other.to_dict()
