# coding: utf-8

"""
    APIv3 (Beta)

     # Introduction Just a quick pick!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # HTTP Methods for RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  <security-definitions/>  # noqa: E501

    The version of the OpenAPI document: 3.0.0-beta
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from egoi-api.configuration import Configuration


class ContactBaseWithStatusFieldsSchemaBase(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'contact_id': 'str',
        'status': 'str',
        'consent': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'birth_date': 'date',
        'language': 'Language',
        'email': 'str',
        'email_status': 'str',
        'cellphone': 'str',
        'cellphone_status': 'str',
        'phone': 'str',
        'phone_status': 'str',
        'push_token_android': 'list[ContactBaseWithStatusFieldsSchemaBasePushTokenAndroid]',
        'push_token_ios': 'list[ContactBaseWithStatusFieldsSchemaBasePushTokenIos]'
    }

    attribute_map = {
        'contact_id': 'contact_id',
        'status': 'status',
        'consent': 'consent',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'birth_date': 'birth_date',
        'language': 'language',
        'email': 'email',
        'email_status': 'email_status',
        'cellphone': 'cellphone',
        'cellphone_status': 'cellphone_status',
        'phone': 'phone',
        'phone_status': 'phone_status',
        'push_token_android': 'push_token_android',
        'push_token_ios': 'push_token_ios'
    }

    def __init__(self, contact_id=None, status='active', consent=None, first_name=None, last_name=None, birth_date=None, language=None, email=None, email_status=None, cellphone=None, cellphone_status=None, phone=None, phone_status=None, push_token_android=None, push_token_ios=None, local_vars_configuration=None):  # noqa: E501
        """ContactBaseWithStatusFieldsSchemaBase - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._contact_id = None
        self._status = None
        self._consent = None
        self._first_name = None
        self._last_name = None
        self._birth_date = None
        self._language = None
        self._email = None
        self._email_status = None
        self._cellphone = None
        self._cellphone_status = None
        self._phone = None
        self._phone_status = None
        self._push_token_android = None
        self._push_token_ios = None
        self.discriminator = None

        if contact_id is not None:
            self.contact_id = contact_id
        if status is not None:
            self.status = status
        if consent is not None:
            self.consent = consent
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if birth_date is not None:
            self.birth_date = birth_date
        if language is not None:
            self.language = language
        if email is not None:
            self.email = email
        if email_status is not None:
            self.email_status = email_status
        if cellphone is not None:
            self.cellphone = cellphone
        if cellphone_status is not None:
            self.cellphone_status = cellphone_status
        if phone is not None:
            self.phone = phone
        if phone_status is not None:
            self.phone_status = phone_status
        if push_token_android is not None:
            self.push_token_android = push_token_android
        if push_token_ios is not None:
            self.push_token_ios = push_token_ios

    @property
    def contact_id(self):
        """Gets the contact_id of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501


        :return: The contact_id of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501
        :rtype: str
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this ContactBaseWithStatusFieldsSchemaBase.


        :param contact_id: The contact_id of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                contact_id is not None and not re.search(r'[a-fA-F\d]{10}', contact_id)):  # noqa: E501
            raise ValueError(r"Invalid value for `contact_id`, must be a follow pattern or equal to `/[a-fA-F\d]{10}/`")  # noqa: E501

        self._contact_id = contact_id

    @property
    def status(self):
        """Gets the status of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501

        Status of the contact  # noqa: E501

        :return: The status of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ContactBaseWithStatusFieldsSchemaBase.

        Status of the contact  # noqa: E501

        :param status: The status of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501
        :type: str
        """
        allowed_values = ["active", "inactive", "removed", "unconfirmed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def consent(self):
        """Gets the consent of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501

        Contact consent  # noqa: E501

        :return: The consent of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501
        :rtype: str
        """
        return self._consent

    @consent.setter
    def consent(self, consent):
        """Sets the consent of this ContactBaseWithStatusFieldsSchemaBase.

        Contact consent  # noqa: E501

        :param consent: The consent of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501
        :type: str
        """
        allowed_values = ["any", "consent", "contract", "legitimate_interest", "none", "protect_vital_interests", "public_interests", "required_by_law", "withdrawn"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and consent not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `consent` ({0}), must be one of {1}"  # noqa: E501
                .format(consent, allowed_values)
            )

        self._consent = consent

    @property
    def first_name(self):
        """Gets the first_name of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501

        First name of the contact  # noqa: E501

        :return: The first_name of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ContactBaseWithStatusFieldsSchemaBase.

        First name of the contact  # noqa: E501

        :param first_name: The first_name of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501

        Last name of the contact  # noqa: E501

        :return: The last_name of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ContactBaseWithStatusFieldsSchemaBase.

        Last name of the contact  # noqa: E501

        :param last_name: The last_name of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def birth_date(self):
        """Gets the birth_date of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501

        Birth date of the contact  # noqa: E501

        :return: The birth_date of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501
        :rtype: date
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this ContactBaseWithStatusFieldsSchemaBase.

        Birth date of the contact  # noqa: E501

        :param birth_date: The birth_date of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501
        :type: date
        """

        self._birth_date = birth_date

    @property
    def language(self):
        """Gets the language of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501


        :return: The language of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501
        :rtype: Language
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this ContactBaseWithStatusFieldsSchemaBase.


        :param language: The language of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501
        :type: Language
        """

        self._language = language

    @property
    def email(self):
        """Gets the email of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501

        Email of the contact  # noqa: E501

        :return: The email of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ContactBaseWithStatusFieldsSchemaBase.

        Email of the contact  # noqa: E501

        :param email: The email of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def email_status(self):
        """Gets the email_status of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501

        Email channel status  # noqa: E501

        :return: The email_status of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501
        :rtype: str
        """
        return self._email_status

    @email_status.setter
    def email_status(self, email_status):
        """Sets the email_status of this ContactBaseWithStatusFieldsSchemaBase.

        Email channel status  # noqa: E501

        :param email_status: The email_status of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501
        :type: str
        """
        allowed_values = ["active", "inactive"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and email_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `email_status` ({0}), must be one of {1}"  # noqa: E501
                .format(email_status, allowed_values)
            )

        self._email_status = email_status

    @property
    def cellphone(self):
        """Gets the cellphone of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501

        Cellphone of the contact  # noqa: E501

        :return: The cellphone of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501
        :rtype: str
        """
        return self._cellphone

    @cellphone.setter
    def cellphone(self, cellphone):
        """Sets the cellphone of this ContactBaseWithStatusFieldsSchemaBase.

        Cellphone of the contact  # noqa: E501

        :param cellphone: The cellphone of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501
        :type: str
        """

        self._cellphone = cellphone

    @property
    def cellphone_status(self):
        """Gets the cellphone_status of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501

        Cellphone channel status  # noqa: E501

        :return: The cellphone_status of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501
        :rtype: str
        """
        return self._cellphone_status

    @cellphone_status.setter
    def cellphone_status(self, cellphone_status):
        """Sets the cellphone_status of this ContactBaseWithStatusFieldsSchemaBase.

        Cellphone channel status  # noqa: E501

        :param cellphone_status: The cellphone_status of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501
        :type: str
        """
        allowed_values = ["active", "inactive"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and cellphone_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `cellphone_status` ({0}), must be one of {1}"  # noqa: E501
                .format(cellphone_status, allowed_values)
            )

        self._cellphone_status = cellphone_status

    @property
    def phone(self):
        """Gets the phone of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501

        Phone of the contact  # noqa: E501

        :return: The phone of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this ContactBaseWithStatusFieldsSchemaBase.

        Phone of the contact  # noqa: E501

        :param phone: The phone of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def phone_status(self):
        """Gets the phone_status of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501

        Phone channel status  # noqa: E501

        :return: The phone_status of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501
        :rtype: str
        """
        return self._phone_status

    @phone_status.setter
    def phone_status(self, phone_status):
        """Sets the phone_status of this ContactBaseWithStatusFieldsSchemaBase.

        Phone channel status  # noqa: E501

        :param phone_status: The phone_status of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501
        :type: str
        """
        allowed_values = ["active", "inactive"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and phone_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `phone_status` ({0}), must be one of {1}"  # noqa: E501
                .format(phone_status, allowed_values)
            )

        self._phone_status = phone_status

    @property
    def push_token_android(self):
        """Gets the push_token_android of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501

        Android push token of the contact  # noqa: E501

        :return: The push_token_android of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501
        :rtype: list[ContactBaseWithStatusFieldsSchemaBasePushTokenAndroid]
        """
        return self._push_token_android

    @push_token_android.setter
    def push_token_android(self, push_token_android):
        """Sets the push_token_android of this ContactBaseWithStatusFieldsSchemaBase.

        Android push token of the contact  # noqa: E501

        :param push_token_android: The push_token_android of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501
        :type: list[ContactBaseWithStatusFieldsSchemaBasePushTokenAndroid]
        """

        self._push_token_android = push_token_android

    @property
    def push_token_ios(self):
        """Gets the push_token_ios of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501

        IOS push token of the contact  # noqa: E501

        :return: The push_token_ios of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501
        :rtype: list[ContactBaseWithStatusFieldsSchemaBasePushTokenIos]
        """
        return self._push_token_ios

    @push_token_ios.setter
    def push_token_ios(self, push_token_ios):
        """Sets the push_token_ios of this ContactBaseWithStatusFieldsSchemaBase.

        IOS push token of the contact  # noqa: E501

        :param push_token_ios: The push_token_ios of this ContactBaseWithStatusFieldsSchemaBase.  # noqa: E501
        :type: list[ContactBaseWithStatusFieldsSchemaBasePushTokenIos]
        """

        self._push_token_ios = push_token_ios

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactBaseWithStatusFieldsSchemaBase):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ContactBaseWithStatusFieldsSchemaBase):
            return True

        return self.to_dict() != other.to_dict()
