# coding: utf-8

"""
    APIv3 (Beta)

     # Introduction Just a quick peek!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  # SDK Get started quickly with E-goi with our integration tools. Our SDK is a modern open source library that makes it easy to integrate your application with E-goi services.  * <a href='https://github.com/E-goi/sdk-java'>Java</a>  * <a href='https://github.com/E-goi/sdk-php'>PHP</a>  * <a href='https://github.com/E-goi/sdk-python'>Python</a>  * <a href='https://github.com/E-goi/sdk-ruby'>Ruby</a>  * <a href='https://github.com/E-goi/sdk-javascript'>Javascript</a>  * <a href='https://github.com/E-goi/sdk-csharp'>C#</a>  # Stream Limits Stream limits are security mesures we have to make sure our API have a fair use policy, for this reason, any request that creates or modifies data (**POST**, **PATCH** and **PUT**) is limited to a maximum of **20MB** of content length. If you arrive to this limit in one of your request, you'll receive a HTTP code **413 (Request Entity Too Large)** and the request will be ignored. To avoid this error in importation's requests, it's advised the request's division in batches that have each one less than 20MB. <security-definitions/>  # noqa: E501

    The version of the OpenAPI document: 3.0.0-beta
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from egoi-api.configuration import Configuration


class CampaignEmailContentWebPage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'url': 'str',
        'use_page_title': 'bool',
        'plain_text': 'str',
        'snippet': 'str'
    }

    attribute_map = {
        'type': 'type',
        'url': 'url',
        'use_page_title': 'use_page_title',
        'plain_text': 'plain_text',
        'snippet': 'snippet'
    }

    def __init__(self, type=None, url=None, use_page_title=False, plain_text=None, snippet=None, local_vars_configuration=None):  # noqa: E501
        """CampaignEmailContentWebPage - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._url = None
        self._use_page_title = None
        self._plain_text = None
        self._snippet = None
        self.discriminator = None

        self.type = type
        self.url = url
        if use_page_title is not None:
            self.use_page_title = use_page_title
        if plain_text is not None:
            self.plain_text = plain_text
        if snippet is not None:
            self.snippet = snippet

    @property
    def type(self):
        """Gets the type of this CampaignEmailContentWebPage.  # noqa: E501


        :return: The type of this CampaignEmailContentWebPage.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CampaignEmailContentWebPage.


        :param type: The type of this CampaignEmailContentWebPage.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["web_page"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def url(self):
        """Gets the url of this CampaignEmailContentWebPage.  # noqa: E501

        Campaign url  # noqa: E501

        :return: The url of this CampaignEmailContentWebPage.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CampaignEmailContentWebPage.

        Campaign url  # noqa: E501

        :param url: The url of this CampaignEmailContentWebPage.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and url is None:  # noqa: E501
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def use_page_title(self):
        """Gets the use_page_title of this CampaignEmailContentWebPage.  # noqa: E501

        True to use page title as the campaign title  # noqa: E501

        :return: The use_page_title of this CampaignEmailContentWebPage.  # noqa: E501
        :rtype: bool
        """
        return self._use_page_title

    @use_page_title.setter
    def use_page_title(self, use_page_title):
        """Sets the use_page_title of this CampaignEmailContentWebPage.

        True to use page title as the campaign title  # noqa: E501

        :param use_page_title: The use_page_title of this CampaignEmailContentWebPage.  # noqa: E501
        :type: bool
        """

        self._use_page_title = use_page_title

    @property
    def plain_text(self):
        """Gets the plain_text of this CampaignEmailContentWebPage.  # noqa: E501

        Plain text for the campaign  # noqa: E501

        :return: The plain_text of this CampaignEmailContentWebPage.  # noqa: E501
        :rtype: str
        """
        return self._plain_text

    @plain_text.setter
    def plain_text(self, plain_text):
        """Sets the plain_text of this CampaignEmailContentWebPage.

        Plain text for the campaign  # noqa: E501

        :param plain_text: The plain_text of this CampaignEmailContentWebPage.  # noqa: E501
        :type: str
        """

        self._plain_text = plain_text

    @property
    def snippet(self):
        """Gets the snippet of this CampaignEmailContentWebPage.  # noqa: E501

        Snippet text for the campaign  # noqa: E501

        :return: The snippet of this CampaignEmailContentWebPage.  # noqa: E501
        :rtype: str
        """
        return self._snippet

    @snippet.setter
    def snippet(self, snippet):
        """Sets the snippet of this CampaignEmailContentWebPage.

        Snippet text for the campaign  # noqa: E501

        :param snippet: The snippet of this CampaignEmailContentWebPage.  # noqa: E501
        :type: str
        """

        self._snippet = snippet

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CampaignEmailContentWebPage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CampaignEmailContentWebPage):
            return True

        return self.to_dict() != other.to_dict()
