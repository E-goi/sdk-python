# coding: utf-8

"""
    APIv3 (Beta)

     # Introduction Just a quick pick!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # HTTP Methods for RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  <security-definitions/>  # noqa: E501

    The version of the OpenAPI document: 3.0.0-beta
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from egoi-api.configuration import Configuration


class AutomationAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'automation_id': 'int',
        'title': 'str',
        'list_id': 'int',
        'status': 'str',
        'created_by': 'int',
        'allow_multiple_contacts': 'bool',
        'contact_limit': 'int',
        'created': 'date',
        'updated': 'date'
    }

    attribute_map = {
        'automation_id': 'automation_id',
        'title': 'title',
        'list_id': 'list_id',
        'status': 'status',
        'created_by': 'created_by',
        'allow_multiple_contacts': 'allow_multiple_contacts',
        'contact_limit': 'contact_limit',
        'created': 'created',
        'updated': 'updated'
    }

    def __init__(self, automation_id=None, title=None, list_id=None, status=None, created_by=None, allow_multiple_contacts=True, contact_limit=None, created=None, updated=None, local_vars_configuration=None):  # noqa: E501
        """AutomationAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._automation_id = None
        self._title = None
        self._list_id = None
        self._status = None
        self._created_by = None
        self._allow_multiple_contacts = None
        self._contact_limit = None
        self._created = None
        self._updated = None
        self.discriminator = None

        if automation_id is not None:
            self.automation_id = automation_id
        if title is not None:
            self.title = title
        if list_id is not None:
            self.list_id = list_id
        if status is not None:
            self.status = status
        if created_by is not None:
            self.created_by = created_by
        if allow_multiple_contacts is not None:
            self.allow_multiple_contacts = allow_multiple_contacts
        if contact_limit is not None:
            self.contact_limit = contact_limit
        if created is not None:
            self.created = created
        if updated is not None:
            self.updated = updated

    @property
    def automation_id(self):
        """Gets the automation_id of this AutomationAllOf.  # noqa: E501


        :return: The automation_id of this AutomationAllOf.  # noqa: E501
        :rtype: int
        """
        return self._automation_id

    @automation_id.setter
    def automation_id(self, automation_id):
        """Sets the automation_id of this AutomationAllOf.


        :param automation_id: The automation_id of this AutomationAllOf.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                automation_id is not None and automation_id < 1):  # noqa: E501
            raise ValueError("Invalid value for `automation_id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._automation_id = automation_id

    @property
    def title(self):
        """Gets the title of this AutomationAllOf.  # noqa: E501

        Automation title  # noqa: E501

        :return: The title of this AutomationAllOf.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AutomationAllOf.

        Automation title  # noqa: E501

        :param title: The title of this AutomationAllOf.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def list_id(self):
        """Gets the list_id of this AutomationAllOf.  # noqa: E501


        :return: The list_id of this AutomationAllOf.  # noqa: E501
        :rtype: int
        """
        return self._list_id

    @list_id.setter
    def list_id(self, list_id):
        """Sets the list_id of this AutomationAllOf.


        :param list_id: The list_id of this AutomationAllOf.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                list_id is not None and list_id < 1):  # noqa: E501
            raise ValueError("Invalid value for `list_id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._list_id = list_id

    @property
    def status(self):
        """Gets the status of this AutomationAllOf.  # noqa: E501

        Automation status  # noqa: E501

        :return: The status of this AutomationAllOf.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AutomationAllOf.

        Automation status  # noqa: E501

        :param status: The status of this AutomationAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = ["active", "inactive"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def created_by(self):
        """Gets the created_by of this AutomationAllOf.  # noqa: E501


        :return: The created_by of this AutomationAllOf.  # noqa: E501
        :rtype: int
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this AutomationAllOf.


        :param created_by: The created_by of this AutomationAllOf.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                created_by is not None and created_by < 1):  # noqa: E501
            raise ValueError("Invalid value for `created_by`, must be a value greater than or equal to `1`")  # noqa: E501

        self._created_by = created_by

    @property
    def allow_multiple_contacts(self):
        """Gets the allow_multiple_contacts of this AutomationAllOf.  # noqa: E501

        True if the automation allows multiple contacts, false otherwise  # noqa: E501

        :return: The allow_multiple_contacts of this AutomationAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._allow_multiple_contacts

    @allow_multiple_contacts.setter
    def allow_multiple_contacts(self, allow_multiple_contacts):
        """Sets the allow_multiple_contacts of this AutomationAllOf.

        True if the automation allows multiple contacts, false otherwise  # noqa: E501

        :param allow_multiple_contacts: The allow_multiple_contacts of this AutomationAllOf.  # noqa: E501
        :type: bool
        """

        self._allow_multiple_contacts = allow_multiple_contacts

    @property
    def contact_limit(self):
        """Gets the contact_limit of this AutomationAllOf.  # noqa: E501

        Contact limit for the automation. Contact limit value (value '0' is returned if contact                                 limit is not enabled)  # noqa: E501

        :return: The contact_limit of this AutomationAllOf.  # noqa: E501
        :rtype: int
        """
        return self._contact_limit

    @contact_limit.setter
    def contact_limit(self, contact_limit):
        """Sets the contact_limit of this AutomationAllOf.

        Contact limit for the automation. Contact limit value (value '0' is returned if contact                                 limit is not enabled)  # noqa: E501

        :param contact_limit: The contact_limit of this AutomationAllOf.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                contact_limit is not None and contact_limit < 0):  # noqa: E501
            raise ValueError("Invalid value for `contact_limit`, must be a value greater than or equal to `0`")  # noqa: E501

        self._contact_limit = contact_limit

    @property
    def created(self):
        """Gets the created of this AutomationAllOf.  # noqa: E501


        :return: The created of this AutomationAllOf.  # noqa: E501
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this AutomationAllOf.


        :param created: The created of this AutomationAllOf.  # noqa: E501
        :type: date
        """

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this AutomationAllOf.  # noqa: E501


        :return: The updated of this AutomationAllOf.  # noqa: E501
        :rtype: date
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this AutomationAllOf.


        :param updated: The updated of this AutomationAllOf.  # noqa: E501
        :type: date
        """

        self._updated = updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AutomationAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AutomationAllOf):
            return True

        return self.to_dict() != other.to_dict()
