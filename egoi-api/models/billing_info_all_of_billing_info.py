# coding: utf-8

"""
    APIv3 (Beta)

     # Introduction Just a quick peek!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  # SDK Get started quickly with E-goi with our integration tools. Our SDK is a modern open source library that makes it easy to integrate your application with E-goi services.  * <a href='https://github.com/E-goi/sdk-java'>Java</a>  * <a href='https://github.com/E-goi/sdk-php'>PHP</a>  * <a href='https://github.com/E-goi/sdk-python'>Python</a>  * <a href='https://github.com/E-goi/sdk-ruby'>Ruby</a>  * <a href='https://github.com/E-goi/sdk-javascript'>Javascript</a>  * <a href='https://github.com/E-goi/sdk-csharp'>C#</a>  # Stream Limits Stream limits are security mesures we have to make sure our API have a fair use policy, for this reason, any request that creates or modifies data (**POST**, **PATCH** and **PUT**) is limited to a maximum of **20MB** of content length. If you arrive to this limit in one of your request, you'll receive a HTTP code **413 (Request Entity Too Large)** and the request will be ignored. To avoid this error in importation's requests, it's advised the request's division in batches that have each one less than 20MB. <security-definitions/>  # noqa: E501

    The version of the OpenAPI document: 3.0.0-beta
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from egoi-api.configuration import Configuration


class BillingInfoAllOfBillingInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'company_legal_name': 'str',
        'vat_number': 'str',
        'country': 'BillingInfoAllOfBillingInfoCountry',
        'city': 'str',
        'state': 'str',
        'address1': 'str',
        'address2': 'str',
        'zip_code': 'str',
        'invoice_comments': 'str'
    }

    attribute_map = {
        'type': 'type',
        'company_legal_name': 'company_legal_name',
        'vat_number': 'vat_number',
        'country': 'country',
        'city': 'city',
        'state': 'state',
        'address1': 'address1',
        'address2': 'address2',
        'zip_code': 'zip_code',
        'invoice_comments': 'invoice_comments'
    }

    def __init__(self, type=None, company_legal_name=None, vat_number=None, country=None, city=None, state=None, address1=None, address2=None, zip_code=None, invoice_comments=None, local_vars_configuration=None):  # noqa: E501
        """BillingInfoAllOfBillingInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._company_legal_name = None
        self._vat_number = None
        self._country = None
        self._city = None
        self._state = None
        self._address1 = None
        self._address2 = None
        self._zip_code = None
        self._invoice_comments = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if company_legal_name is not None:
            self.company_legal_name = company_legal_name
        if vat_number is not None:
            self.vat_number = vat_number
        if country is not None:
            self.country = country
        if city is not None:
            self.city = city
        if state is not None:
            self.state = state
        if address1 is not None:
            self.address1 = address1
        if address2 is not None:
            self.address2 = address2
        if zip_code is not None:
            self.zip_code = zip_code
        if invoice_comments is not None:
            self.invoice_comments = invoice_comments

    @property
    def type(self):
        """Gets the type of this BillingInfoAllOfBillingInfo.  # noqa: E501

        Type billing  # noqa: E501

        :return: The type of this BillingInfoAllOfBillingInfo.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BillingInfoAllOfBillingInfo.

        Type billing  # noqa: E501

        :param type: The type of this BillingInfoAllOfBillingInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["single_person", "company"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def company_legal_name(self):
        """Gets the company_legal_name of this BillingInfoAllOfBillingInfo.  # noqa: E501

        Company legal name  # noqa: E501

        :return: The company_legal_name of this BillingInfoAllOfBillingInfo.  # noqa: E501
        :rtype: str
        """
        return self._company_legal_name

    @company_legal_name.setter
    def company_legal_name(self, company_legal_name):
        """Sets the company_legal_name of this BillingInfoAllOfBillingInfo.

        Company legal name  # noqa: E501

        :param company_legal_name: The company_legal_name of this BillingInfoAllOfBillingInfo.  # noqa: E501
        :type: str
        """

        self._company_legal_name = company_legal_name

    @property
    def vat_number(self):
        """Gets the vat_number of this BillingInfoAllOfBillingInfo.  # noqa: E501

        Vat number  # noqa: E501

        :return: The vat_number of this BillingInfoAllOfBillingInfo.  # noqa: E501
        :rtype: str
        """
        return self._vat_number

    @vat_number.setter
    def vat_number(self, vat_number):
        """Sets the vat_number of this BillingInfoAllOfBillingInfo.

        Vat number  # noqa: E501

        :param vat_number: The vat_number of this BillingInfoAllOfBillingInfo.  # noqa: E501
        :type: str
        """

        self._vat_number = vat_number

    @property
    def country(self):
        """Gets the country of this BillingInfoAllOfBillingInfo.  # noqa: E501


        :return: The country of this BillingInfoAllOfBillingInfo.  # noqa: E501
        :rtype: BillingInfoAllOfBillingInfoCountry
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this BillingInfoAllOfBillingInfo.


        :param country: The country of this BillingInfoAllOfBillingInfo.  # noqa: E501
        :type: BillingInfoAllOfBillingInfoCountry
        """

        self._country = country

    @property
    def city(self):
        """Gets the city of this BillingInfoAllOfBillingInfo.  # noqa: E501

        City  # noqa: E501

        :return: The city of this BillingInfoAllOfBillingInfo.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this BillingInfoAllOfBillingInfo.

        City  # noqa: E501

        :param city: The city of this BillingInfoAllOfBillingInfo.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state(self):
        """Gets the state of this BillingInfoAllOfBillingInfo.  # noqa: E501

        State  # noqa: E501

        :return: The state of this BillingInfoAllOfBillingInfo.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this BillingInfoAllOfBillingInfo.

        State  # noqa: E501

        :param state: The state of this BillingInfoAllOfBillingInfo.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def address1(self):
        """Gets the address1 of this BillingInfoAllOfBillingInfo.  # noqa: E501

        Address 1  # noqa: E501

        :return: The address1 of this BillingInfoAllOfBillingInfo.  # noqa: E501
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """Sets the address1 of this BillingInfoAllOfBillingInfo.

        Address 1  # noqa: E501

        :param address1: The address1 of this BillingInfoAllOfBillingInfo.  # noqa: E501
        :type: str
        """

        self._address1 = address1

    @property
    def address2(self):
        """Gets the address2 of this BillingInfoAllOfBillingInfo.  # noqa: E501

        Address 2  # noqa: E501

        :return: The address2 of this BillingInfoAllOfBillingInfo.  # noqa: E501
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this BillingInfoAllOfBillingInfo.

        Address 2  # noqa: E501

        :param address2: The address2 of this BillingInfoAllOfBillingInfo.  # noqa: E501
        :type: str
        """

        self._address2 = address2

    @property
    def zip_code(self):
        """Gets the zip_code of this BillingInfoAllOfBillingInfo.  # noqa: E501

        Zip Code  # noqa: E501

        :return: The zip_code of this BillingInfoAllOfBillingInfo.  # noqa: E501
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this BillingInfoAllOfBillingInfo.

        Zip Code  # noqa: E501

        :param zip_code: The zip_code of this BillingInfoAllOfBillingInfo.  # noqa: E501
        :type: str
        """

        self._zip_code = zip_code

    @property
    def invoice_comments(self):
        """Gets the invoice_comments of this BillingInfoAllOfBillingInfo.  # noqa: E501

        Invoice Comments  # noqa: E501

        :return: The invoice_comments of this BillingInfoAllOfBillingInfo.  # noqa: E501
        :rtype: str
        """
        return self._invoice_comments

    @invoice_comments.setter
    def invoice_comments(self, invoice_comments):
        """Sets the invoice_comments of this BillingInfoAllOfBillingInfo.

        Invoice Comments  # noqa: E501

        :param invoice_comments: The invoice_comments of this BillingInfoAllOfBillingInfo.  # noqa: E501
        :type: str
        """

        self._invoice_comments = invoice_comments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BillingInfoAllOfBillingInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BillingInfoAllOfBillingInfo):
            return True

        return self.to_dict() != other.to_dict()
