# coding: utf-8

"""
    APIv3 (Beta)

     # Introduction Just a quick pick!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # HTTP Methods for RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  <security-definitions/>  # noqa: E501

    The version of the OpenAPI document: 3.0.0-beta
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from egoi-api.configuration import Configuration


class Campaign(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'campaign_hash': 'str',
        'status': 'str',
        'thumbnail': 'str',
        'channel': 'str',
        'internal_name': 'str',
        'list_id': 'int',
        'title': 'str',
        'created_by': 'int',
        'group_id': 'int',
        'created': 'datetime',
        'updated': 'datetime',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'schedule_date': 'CampaignScheduleDate'
    }

    attribute_map = {
        'campaign_hash': 'campaign_hash',
        'status': 'status',
        'thumbnail': 'thumbnail',
        'channel': 'channel',
        'internal_name': 'internal_name',
        'list_id': 'list_id',
        'title': 'title',
        'created_by': 'created_by',
        'group_id': 'group_id',
        'created': 'created',
        'updated': 'updated',
        'start_date': 'start_date',
        'end_date': 'end_date',
        'schedule_date': 'schedule_date'
    }

    def __init__(self, campaign_hash=None, status=None, thumbnail=None, channel=None, internal_name=None, list_id=None, title=None, created_by=None, group_id=None, created=None, updated=None, start_date=None, end_date=None, schedule_date=None, local_vars_configuration=None):  # noqa: E501
        """Campaign - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._campaign_hash = None
        self._status = None
        self._thumbnail = None
        self._channel = None
        self._internal_name = None
        self._list_id = None
        self._title = None
        self._created_by = None
        self._group_id = None
        self._created = None
        self._updated = None
        self._start_date = None
        self._end_date = None
        self._schedule_date = None
        self.discriminator = None

        if campaign_hash is not None:
            self.campaign_hash = campaign_hash
        if status is not None:
            self.status = status
        if thumbnail is not None:
            self.thumbnail = thumbnail
        if channel is not None:
            self.channel = channel
        if internal_name is not None:
            self.internal_name = internal_name
        if list_id is not None:
            self.list_id = list_id
        if title is not None:
            self.title = title
        if created_by is not None:
            self.created_by = created_by
        if group_id is not None:
            self.group_id = group_id
        if created is not None:
            self.created = created
        if updated is not None:
            self.updated = updated
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if schedule_date is not None:
            self.schedule_date = schedule_date

    @property
    def campaign_hash(self):
        """Gets the campaign_hash of this Campaign.  # noqa: E501


        :return: The campaign_hash of this Campaign.  # noqa: E501
        :rtype: str
        """
        return self._campaign_hash

    @campaign_hash.setter
    def campaign_hash(self, campaign_hash):
        """Sets the campaign_hash of this Campaign.


        :param campaign_hash: The campaign_hash of this Campaign.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                campaign_hash is not None and not re.search(r'[a-zA-Z0-9_-]*', campaign_hash)):  # noqa: E501
            raise ValueError(r"Invalid value for `campaign_hash`, must be a follow pattern or equal to `/[a-zA-Z0-9_-]*/`")  # noqa: E501

        self._campaign_hash = campaign_hash

    @property
    def status(self):
        """Gets the status of this Campaign.  # noqa: E501

        Status of the campaign  # noqa: E501

        :return: The status of this Campaign.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Campaign.

        Status of the campaign  # noqa: E501

        :param status: The status of this Campaign.  # noqa: E501
        :type: str
        """
        allowed_values = ["draft", "canceled", "queued", "paused", "sending", "sent"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def thumbnail(self):
        """Gets the thumbnail of this Campaign.  # noqa: E501

        Thumbnail of the campaign  # noqa: E501

        :return: The thumbnail of this Campaign.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this Campaign.

        Thumbnail of the campaign  # noqa: E501

        :param thumbnail: The thumbnail of this Campaign.  # noqa: E501
        :type: str
        """

        self._thumbnail = thumbnail

    @property
    def channel(self):
        """Gets the channel of this Campaign.  # noqa: E501

        Channel of the campaign  # noqa: E501

        :return: The channel of this Campaign.  # noqa: E501
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this Campaign.

        Channel of the campaign  # noqa: E501

        :param channel: The channel of this Campaign.  # noqa: E501
        :type: str
        """
        allowed_values = ["email", "push", "sms", "smart_sms", "voice", "web_push"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and channel not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `channel` ({0}), must be one of {1}"  # noqa: E501
                .format(channel, allowed_values)
            )

        self._channel = channel

    @property
    def internal_name(self):
        """Gets the internal_name of this Campaign.  # noqa: E501

        Internal name of the campaign  # noqa: E501

        :return: The internal_name of this Campaign.  # noqa: E501
        :rtype: str
        """
        return self._internal_name

    @internal_name.setter
    def internal_name(self, internal_name):
        """Sets the internal_name of this Campaign.

        Internal name of the campaign  # noqa: E501

        :param internal_name: The internal_name of this Campaign.  # noqa: E501
        :type: str
        """

        self._internal_name = internal_name

    @property
    def list_id(self):
        """Gets the list_id of this Campaign.  # noqa: E501


        :return: The list_id of this Campaign.  # noqa: E501
        :rtype: int
        """
        return self._list_id

    @list_id.setter
    def list_id(self, list_id):
        """Sets the list_id of this Campaign.


        :param list_id: The list_id of this Campaign.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                list_id is not None and list_id < 1):  # noqa: E501
            raise ValueError("Invalid value for `list_id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._list_id = list_id

    @property
    def title(self):
        """Gets the title of this Campaign.  # noqa: E501

        Subject of the campaign  # noqa: E501

        :return: The title of this Campaign.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Campaign.

        Subject of the campaign  # noqa: E501

        :param title: The title of this Campaign.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def created_by(self):
        """Gets the created_by of this Campaign.  # noqa: E501


        :return: The created_by of this Campaign.  # noqa: E501
        :rtype: int
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Campaign.


        :param created_by: The created_by of this Campaign.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                created_by is not None and created_by < 1):  # noqa: E501
            raise ValueError("Invalid value for `created_by`, must be a value greater than or equal to `1`")  # noqa: E501

        self._created_by = created_by

    @property
    def group_id(self):
        """Gets the group_id of this Campaign.  # noqa: E501


        :return: The group_id of this Campaign.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this Campaign.


        :param group_id: The group_id of this Campaign.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                group_id is not None and group_id < 1):  # noqa: E501
            raise ValueError("Invalid value for `group_id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._group_id = group_id

    @property
    def created(self):
        """Gets the created of this Campaign.  # noqa: E501


        :return: The created of this Campaign.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Campaign.


        :param created: The created of this Campaign.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this Campaign.  # noqa: E501


        :return: The updated of this Campaign.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Campaign.


        :param updated: The updated of this Campaign.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def start_date(self):
        """Gets the start_date of this Campaign.  # noqa: E501


        :return: The start_date of this Campaign.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Campaign.


        :param start_date: The start_date of this Campaign.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this Campaign.  # noqa: E501


        :return: The end_date of this Campaign.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Campaign.


        :param end_date: The end_date of this Campaign.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def schedule_date(self):
        """Gets the schedule_date of this Campaign.  # noqa: E501


        :return: The schedule_date of this Campaign.  # noqa: E501
        :rtype: CampaignScheduleDate
        """
        return self._schedule_date

    @schedule_date.setter
    def schedule_date(self, schedule_date):
        """Sets the schedule_date of this Campaign.


        :param schedule_date: The schedule_date of this Campaign.  # noqa: E501
        :type: CampaignScheduleDate
        """

        self._schedule_date = schedule_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Campaign):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Campaign):
            return True

        return self.to_dict() != other.to_dict()
