# coding: utf-8

"""
    APIv3 (Beta)

     # Introduction Just a quick peek!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  # SDK Get started quickly with E-goi with our integration tools. Our SDK is a modern open source library that makes it easy to integrate your application with E-goi services.  * <a href='https://github.com/E-goi/sdk-java'>Java</a>  * <a href='https://github.com/E-goi/sdk-php'>PHP</a>  * <a href='https://github.com/E-goi/sdk-python'>Python</a>  * <a href='https://github.com/E-goi/sdk-ruby'>Ruby</a>  * <a href='https://github.com/E-goi/sdk-javascript'>Javascript</a>  * <a href='https://github.com/E-goi/sdk-csharp'>C#</a>  # Stream Limits Stream limits are security mesures we have to make sure our API have a fair use policy, for this reason, any request that creates or modifies data (**POST**, **PATCH** and **PUT**) is limited to a maximum of **20MB** of content length. If you arrive to this limit in one of your request, you'll receive a HTTP code **413 (Request Entity Too Large)** and the request will be ignored. To avoid this error in importation's requests, it's advised the request's division in batches that have each one less than 20MB. <security-definitions/>  # noqa: E501

    The version of the OpenAPI document: 3.0.0-beta
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from egoi-api.configuration import Configuration


class FieldOption(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'option_id': 'int',
        'en': 'str',
        'pt': 'str',
        'br': 'str',
        'es': 'str',
        'de': 'str',
        'hu': 'str',
        'fr': 'str'
    }

    attribute_map = {
        'option_id': 'option_id',
        'en': 'en',
        'pt': 'pt',
        'br': 'br',
        'es': 'es',
        'de': 'de',
        'hu': 'hu',
        'fr': 'fr'
    }

    def __init__(self, option_id=None, en=None, pt=None, br=None, es=None, de=None, hu=None, fr=None, local_vars_configuration=None):  # noqa: E501
        """FieldOption - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._option_id = None
        self._en = None
        self._pt = None
        self._br = None
        self._es = None
        self._de = None
        self._hu = None
        self._fr = None
        self.discriminator = None

        if option_id is not None:
            self.option_id = option_id
        if en is not None:
            self.en = en
        if pt is not None:
            self.pt = pt
        if br is not None:
            self.br = br
        if es is not None:
            self.es = es
        if de is not None:
            self.de = de
        if hu is not None:
            self.hu = hu
        if fr is not None:
            self.fr = fr

    @property
    def option_id(self):
        """Gets the option_id of this FieldOption.  # noqa: E501


        :return: The option_id of this FieldOption.  # noqa: E501
        :rtype: int
        """
        return self._option_id

    @option_id.setter
    def option_id(self, option_id):
        """Sets the option_id of this FieldOption.


        :param option_id: The option_id of this FieldOption.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                option_id is not None and option_id < 1):  # noqa: E501
            raise ValueError("Invalid value for `option_id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._option_id = option_id

    @property
    def en(self):
        """Gets the en of this FieldOption.  # noqa: E501

        English option value  # noqa: E501

        :return: The en of this FieldOption.  # noqa: E501
        :rtype: str
        """
        return self._en

    @en.setter
    def en(self, en):
        """Sets the en of this FieldOption.

        English option value  # noqa: E501

        :param en: The en of this FieldOption.  # noqa: E501
        :type: str
        """

        self._en = en

    @property
    def pt(self):
        """Gets the pt of this FieldOption.  # noqa: E501

        Portuguese option value  # noqa: E501

        :return: The pt of this FieldOption.  # noqa: E501
        :rtype: str
        """
        return self._pt

    @pt.setter
    def pt(self, pt):
        """Sets the pt of this FieldOption.

        Portuguese option value  # noqa: E501

        :param pt: The pt of this FieldOption.  # noqa: E501
        :type: str
        """

        self._pt = pt

    @property
    def br(self):
        """Gets the br of this FieldOption.  # noqa: E501

        Brazilian portuguese option value  # noqa: E501

        :return: The br of this FieldOption.  # noqa: E501
        :rtype: str
        """
        return self._br

    @br.setter
    def br(self, br):
        """Sets the br of this FieldOption.

        Brazilian portuguese option value  # noqa: E501

        :param br: The br of this FieldOption.  # noqa: E501
        :type: str
        """

        self._br = br

    @property
    def es(self):
        """Gets the es of this FieldOption.  # noqa: E501

        Spanish option value  # noqa: E501

        :return: The es of this FieldOption.  # noqa: E501
        :rtype: str
        """
        return self._es

    @es.setter
    def es(self, es):
        """Sets the es of this FieldOption.

        Spanish option value  # noqa: E501

        :param es: The es of this FieldOption.  # noqa: E501
        :type: str
        """

        self._es = es

    @property
    def de(self):
        """Gets the de of this FieldOption.  # noqa: E501

        German option value  # noqa: E501

        :return: The de of this FieldOption.  # noqa: E501
        :rtype: str
        """
        return self._de

    @de.setter
    def de(self, de):
        """Sets the de of this FieldOption.

        German option value  # noqa: E501

        :param de: The de of this FieldOption.  # noqa: E501
        :type: str
        """

        self._de = de

    @property
    def hu(self):
        """Gets the hu of this FieldOption.  # noqa: E501

        Hungarian option value  # noqa: E501

        :return: The hu of this FieldOption.  # noqa: E501
        :rtype: str
        """
        return self._hu

    @hu.setter
    def hu(self, hu):
        """Sets the hu of this FieldOption.

        Hungarian option value  # noqa: E501

        :param hu: The hu of this FieldOption.  # noqa: E501
        :type: str
        """

        self._hu = hu

    @property
    def fr(self):
        """Gets the fr of this FieldOption.  # noqa: E501

        French option value  # noqa: E501

        :return: The fr of this FieldOption.  # noqa: E501
        :rtype: str
        """
        return self._fr

    @fr.setter
    def fr(self, fr):
        """Sets the fr of this FieldOption.

        French option value  # noqa: E501

        :param fr: The fr of this FieldOption.  # noqa: E501
        :type: str
        """

        self._fr = fr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FieldOption):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FieldOption):
            return True

        return self.to_dict() != other.to_dict()
