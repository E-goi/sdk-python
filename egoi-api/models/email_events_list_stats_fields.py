# coding: utf-8

"""
    APIv3 (Beta)

     # Introduction Just a quick peek!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  # SDK Get started quickly with E-goi with our integration tools. Our SDK is a modern open source library that makes it easy to integrate your application with E-goi services. * <b><a href='https://github.com/E-goi/sdk-java'>Java</a></b> * <b><a href='https://github.com/E-goi/sdk-php'>PHP</a></b> * <b><a href='https://github.com/E-goi/sdk-python'>Python</a></b>  <security-definitions/>  # noqa: E501

    The version of the OpenAPI document: 3.0.0-beta
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from egoi-api.configuration import Configuration


class EmailEventsListStatsFields(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'opens': 'bool',
        'clicks': 'bool',
        'complaints': 'bool',
        'unsubscribes': 'bool',
        'bounces': 'bool',
        'forwards': 'bool',
        'forwards_conversion': 'bool',
        'fb_likes': 'bool',
        'fb_shares': 'bool',
        'tw_shares': 'bool',
        'social_shares': 'bool'
    }

    attribute_map = {
        'opens': 'opens',
        'clicks': 'clicks',
        'complaints': 'complaints',
        'unsubscribes': 'unsubscribes',
        'bounces': 'bounces',
        'forwards': 'forwards',
        'forwards_conversion': 'forwards_conversion',
        'fb_likes': 'fb_likes',
        'fb_shares': 'fb_shares',
        'tw_shares': 'tw_shares',
        'social_shares': 'social_shares'
    }

    def __init__(self, opens=None, clicks=None, complaints=None, unsubscribes=None, bounces=None, forwards=None, forwards_conversion=None, fb_likes=None, fb_shares=None, tw_shares=None, social_shares=None, local_vars_configuration=None):  # noqa: E501
        """EmailEventsListStatsFields - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._opens = None
        self._clicks = None
        self._complaints = None
        self._unsubscribes = None
        self._bounces = None
        self._forwards = None
        self._forwards_conversion = None
        self._fb_likes = None
        self._fb_shares = None
        self._tw_shares = None
        self._social_shares = None
        self.discriminator = None

        self.opens = opens
        self.clicks = clicks
        self.complaints = complaints
        self.unsubscribes = unsubscribes
        self.bounces = bounces
        self.forwards = forwards
        self.forwards_conversion = forwards_conversion
        self.fb_likes = fb_likes
        self.fb_shares = fb_shares
        self.tw_shares = tw_shares
        self.social_shares = social_shares

    @property
    def opens(self):
        """Gets the opens of this EmailEventsListStatsFields.  # noqa: E501

        True to include opens, false otherwise  # noqa: E501

        :return: The opens of this EmailEventsListStatsFields.  # noqa: E501
        :rtype: bool
        """
        return self._opens

    @opens.setter
    def opens(self, opens):
        """Sets the opens of this EmailEventsListStatsFields.

        True to include opens, false otherwise  # noqa: E501

        :param opens: The opens of this EmailEventsListStatsFields.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and opens is None:  # noqa: E501
            raise ValueError("Invalid value for `opens`, must not be `None`")  # noqa: E501

        self._opens = opens

    @property
    def clicks(self):
        """Gets the clicks of this EmailEventsListStatsFields.  # noqa: E501

        True to include clicks, false otherwise  # noqa: E501

        :return: The clicks of this EmailEventsListStatsFields.  # noqa: E501
        :rtype: bool
        """
        return self._clicks

    @clicks.setter
    def clicks(self, clicks):
        """Sets the clicks of this EmailEventsListStatsFields.

        True to include clicks, false otherwise  # noqa: E501

        :param clicks: The clicks of this EmailEventsListStatsFields.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and clicks is None:  # noqa: E501
            raise ValueError("Invalid value for `clicks`, must not be `None`")  # noqa: E501

        self._clicks = clicks

    @property
    def complaints(self):
        """Gets the complaints of this EmailEventsListStatsFields.  # noqa: E501

        True to include complaints, false otherwise  # noqa: E501

        :return: The complaints of this EmailEventsListStatsFields.  # noqa: E501
        :rtype: bool
        """
        return self._complaints

    @complaints.setter
    def complaints(self, complaints):
        """Sets the complaints of this EmailEventsListStatsFields.

        True to include complaints, false otherwise  # noqa: E501

        :param complaints: The complaints of this EmailEventsListStatsFields.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and complaints is None:  # noqa: E501
            raise ValueError("Invalid value for `complaints`, must not be `None`")  # noqa: E501

        self._complaints = complaints

    @property
    def unsubscribes(self):
        """Gets the unsubscribes of this EmailEventsListStatsFields.  # noqa: E501

        True to include unsubscriptions, false otherwise  # noqa: E501

        :return: The unsubscribes of this EmailEventsListStatsFields.  # noqa: E501
        :rtype: bool
        """
        return self._unsubscribes

    @unsubscribes.setter
    def unsubscribes(self, unsubscribes):
        """Sets the unsubscribes of this EmailEventsListStatsFields.

        True to include unsubscriptions, false otherwise  # noqa: E501

        :param unsubscribes: The unsubscribes of this EmailEventsListStatsFields.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and unsubscribes is None:  # noqa: E501
            raise ValueError("Invalid value for `unsubscribes`, must not be `None`")  # noqa: E501

        self._unsubscribes = unsubscribes

    @property
    def bounces(self):
        """Gets the bounces of this EmailEventsListStatsFields.  # noqa: E501

        True to include bounces, false otherwise  # noqa: E501

        :return: The bounces of this EmailEventsListStatsFields.  # noqa: E501
        :rtype: bool
        """
        return self._bounces

    @bounces.setter
    def bounces(self, bounces):
        """Sets the bounces of this EmailEventsListStatsFields.

        True to include bounces, false otherwise  # noqa: E501

        :param bounces: The bounces of this EmailEventsListStatsFields.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and bounces is None:  # noqa: E501
            raise ValueError("Invalid value for `bounces`, must not be `None`")  # noqa: E501

        self._bounces = bounces

    @property
    def forwards(self):
        """Gets the forwards of this EmailEventsListStatsFields.  # noqa: E501

        True to include forwards, false otherwise  # noqa: E501

        :return: The forwards of this EmailEventsListStatsFields.  # noqa: E501
        :rtype: bool
        """
        return self._forwards

    @forwards.setter
    def forwards(self, forwards):
        """Sets the forwards of this EmailEventsListStatsFields.

        True to include forwards, false otherwise  # noqa: E501

        :param forwards: The forwards of this EmailEventsListStatsFields.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and forwards is None:  # noqa: E501
            raise ValueError("Invalid value for `forwards`, must not be `None`")  # noqa: E501

        self._forwards = forwards

    @property
    def forwards_conversion(self):
        """Gets the forwards_conversion of this EmailEventsListStatsFields.  # noqa: E501

        True to include converted forwards, false otherwise  # noqa: E501

        :return: The forwards_conversion of this EmailEventsListStatsFields.  # noqa: E501
        :rtype: bool
        """
        return self._forwards_conversion

    @forwards_conversion.setter
    def forwards_conversion(self, forwards_conversion):
        """Sets the forwards_conversion of this EmailEventsListStatsFields.

        True to include converted forwards, false otherwise  # noqa: E501

        :param forwards_conversion: The forwards_conversion of this EmailEventsListStatsFields.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and forwards_conversion is None:  # noqa: E501
            raise ValueError("Invalid value for `forwards_conversion`, must not be `None`")  # noqa: E501

        self._forwards_conversion = forwards_conversion

    @property
    def fb_likes(self):
        """Gets the fb_likes of this EmailEventsListStatsFields.  # noqa: E501

        True to include facebook likes, false otherwise  # noqa: E501

        :return: The fb_likes of this EmailEventsListStatsFields.  # noqa: E501
        :rtype: bool
        """
        return self._fb_likes

    @fb_likes.setter
    def fb_likes(self, fb_likes):
        """Sets the fb_likes of this EmailEventsListStatsFields.

        True to include facebook likes, false otherwise  # noqa: E501

        :param fb_likes: The fb_likes of this EmailEventsListStatsFields.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and fb_likes is None:  # noqa: E501
            raise ValueError("Invalid value for `fb_likes`, must not be `None`")  # noqa: E501

        self._fb_likes = fb_likes

    @property
    def fb_shares(self):
        """Gets the fb_shares of this EmailEventsListStatsFields.  # noqa: E501

        True to include facebook shares, false otherwise  # noqa: E501

        :return: The fb_shares of this EmailEventsListStatsFields.  # noqa: E501
        :rtype: bool
        """
        return self._fb_shares

    @fb_shares.setter
    def fb_shares(self, fb_shares):
        """Sets the fb_shares of this EmailEventsListStatsFields.

        True to include facebook shares, false otherwise  # noqa: E501

        :param fb_shares: The fb_shares of this EmailEventsListStatsFields.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and fb_shares is None:  # noqa: E501
            raise ValueError("Invalid value for `fb_shares`, must not be `None`")  # noqa: E501

        self._fb_shares = fb_shares

    @property
    def tw_shares(self):
        """Gets the tw_shares of this EmailEventsListStatsFields.  # noqa: E501

        True to include twitter shares, false otherwise  # noqa: E501

        :return: The tw_shares of this EmailEventsListStatsFields.  # noqa: E501
        :rtype: bool
        """
        return self._tw_shares

    @tw_shares.setter
    def tw_shares(self, tw_shares):
        """Sets the tw_shares of this EmailEventsListStatsFields.

        True to include twitter shares, false otherwise  # noqa: E501

        :param tw_shares: The tw_shares of this EmailEventsListStatsFields.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and tw_shares is None:  # noqa: E501
            raise ValueError("Invalid value for `tw_shares`, must not be `None`")  # noqa: E501

        self._tw_shares = tw_shares

    @property
    def social_shares(self):
        """Gets the social_shares of this EmailEventsListStatsFields.  # noqa: E501

        True to include social shares, false otherwise  # noqa: E501

        :return: The social_shares of this EmailEventsListStatsFields.  # noqa: E501
        :rtype: bool
        """
        return self._social_shares

    @social_shares.setter
    def social_shares(self, social_shares):
        """Sets the social_shares of this EmailEventsListStatsFields.

        True to include social shares, false otherwise  # noqa: E501

        :param social_shares: The social_shares of this EmailEventsListStatsFields.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and social_shares is None:  # noqa: E501
            raise ValueError("Invalid value for `social_shares`, must not be `None`")  # noqa: E501

        self._social_shares = social_shares

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailEventsListStatsFields):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EmailEventsListStatsFields):
            return True

        return self.to_dict() != other.to_dict()
