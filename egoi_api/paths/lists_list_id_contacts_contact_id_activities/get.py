# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from egoi_api import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from egoi_api import schemas  # noqa: F401

from egoi_api.model.request_timeout import RequestTimeout
from egoi_api.model.unauthorized import Unauthorized
from egoi_api.model.service_unavailable import ServiceUnavailable
from egoi_api.model.contact_query_id import ContactQueryId
from egoi_api.model.contact_activity import ContactActivity
from egoi_api.model.unprocessable_entity import UnprocessableEntity
from egoi_api.model.internal_server_error import InternalServerError
from egoi_api.model.too_many_requests import TooManyRequests
from egoi_api.model.query_id import QueryId
from egoi_api.model.forbidden import Forbidden

from . import path

# Query params


class OffsetSchema(
    schemas.IntSchema
):


    class MetaOapg:
        inclusive_minimum = 0


class LimitSchema(
    schemas.IntSchema
):


    class MetaOapg:
        inclusive_maximum = 100
        inclusive_minimum = 1
DateMinSchema = schemas.DateTimeSchema
DateMaxSchema = schemas.DateTimeSchema


class ActionNameSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "email_open": "EMAIL_OPEN",
            "email_click": "EMAIL_CLICK",
            "forward": "FORWARD",
            "conversion": "CONVERSION",
            "email_send": "EMAIL_SEND",
            "sms_send": "SMS_SEND",
            "voice_send": "VOICE_SEND",
            "mms_send": "MMS_SEND",
            "sms_report": "SMS_REPORT",
            "voice_report": "VOICE_REPORT",
            "invitation_send": "INVITATION_SEND",
            "invitation_open": "INVITATION_OPEN",
            "mms_open": "MMS_OPEN",
            "unsubscribe": "UNSUBSCRIBE",
            "email_soft_bounce": "EMAIL_SOFT_BOUNCE",
            "email_hard_bounce": "EMAIL_HARD_BOUNCE",
            "subscription": "SUBSCRIPTION",
            "resubscription": "RESUBSCRIPTION",
            "unsubscribe_reason": "UNSUBSCRIBE_REASON",
            "facebook_like": "FACEBOOK_LIKE",
            "social_share": "SOCIAL_SHARE",
            "unsubscribe_manual": "UNSUBSCRIBE_MANUAL",
            "double_optin": "DOUBLE_OPTIN",
            "double_optin_resend": "DOUBLE_OPTIN_RESEND",
            "email_spam_complaint": "EMAIL_SPAM_COMPLAINT",
            "email_field_disable": "EMAIL_FIELD_DISABLE",
            "cellphone_field_disable": "CELLPHONE_FIELD_DISABLE",
            "phone_field_disable": "PHONE_FIELD_DISABLE",
            "unsubscribe_api": "UNSUBSCRIBE_API",
            "email_field_enable": "EMAIL_FIELD_ENABLE",
            "cellphone_field_enable": "CELLPHONE_FIELD_ENABLE",
            "phone_field_enable": "PHONE_FIELD_ENABLE",
            "edit_subscription": "EDIT_SUBSCRIPTION",
            "double_optedit": "DOUBLE_OPTEDIT",
            "automation_event": "AUTOMATION_EVENT",
            "push_send": "PUSH_SEND",
            "push_open": "PUSH_OPEN",
            "push_click": "PUSH_CLICK",
            "push_received": "PUSH_RECEIVED",
            "push_error": "PUSH_ERROR",
            "push_canceled": "PUSH_CANCELED",
            "reply_to_email": "REPLY_TO_EMAIL",
            "web_push_send": "WEB_PUSH_SEND",
            "web_push_delivered": "WEB_PUSH_DELIVERED",
            "web_push_open": "WEB_PUSH_OPEN",
            "web_push_bounce": "WEB_PUSH_BOUNCE",
            "web_push_click": "WEB_PUSH_CLICK",
            "web_push_subscription": "WEB_PUSH_SUBSCRIPTION",
            "web_push_unsubscription": "WEB_PUSH_UNSUBSCRIPTION",
            "add_push_contact": "ADD_PUSH_CONTACT",
            "remove_push_contact": "REMOVE_PUSH_CONTACT",
            "forget_subscription": "FORGET_SUBSCRIPTION",
            "change_consent": "CHANGE_CONSENT",
            "push_unsubscription": "PUSH_UNSUBSCRIPTION",
            "voice_menu_event": "VOICE_MENU_EVENT",
            "voice_redirect": "VOICE_REDIRECT",
            "automation_action": "AUTOMATION_ACTION",
            "automation_trigger": "AUTOMATION_TRIGGER",
            "push_delivered": "PUSH_DELIVERED",
            "attach_tag": "ATTACH_TAG",
            "detach_tag": "DETACH_TAG",
            "smart_sms_send": "SMART_SMS_SEND",
            "smart_sms_open": "SMART_SMS_OPEN",
            "smart_sms_click": "SMART_SMS_CLICK",
            "smart_sms_report": "SMART_SMS_REPORT",
        }
    
    @schemas.classproperty
    def EMAIL_OPEN(cls):
        return cls("email_open")
    
    @schemas.classproperty
    def EMAIL_CLICK(cls):
        return cls("email_click")
    
    @schemas.classproperty
    def FORWARD(cls):
        return cls("forward")
    
    @schemas.classproperty
    def CONVERSION(cls):
        return cls("conversion")
    
    @schemas.classproperty
    def EMAIL_SEND(cls):
        return cls("email_send")
    
    @schemas.classproperty
    def SMS_SEND(cls):
        return cls("sms_send")
    
    @schemas.classproperty
    def VOICE_SEND(cls):
        return cls("voice_send")
    
    @schemas.classproperty
    def MMS_SEND(cls):
        return cls("mms_send")
    
    @schemas.classproperty
    def SMS_REPORT(cls):
        return cls("sms_report")
    
    @schemas.classproperty
    def VOICE_REPORT(cls):
        return cls("voice_report")
    
    @schemas.classproperty
    def INVITATION_SEND(cls):
        return cls("invitation_send")
    
    @schemas.classproperty
    def INVITATION_OPEN(cls):
        return cls("invitation_open")
    
    @schemas.classproperty
    def MMS_OPEN(cls):
        return cls("mms_open")
    
    @schemas.classproperty
    def UNSUBSCRIBE(cls):
        return cls("unsubscribe")
    
    @schemas.classproperty
    def EMAIL_SOFT_BOUNCE(cls):
        return cls("email_soft_bounce")
    
    @schemas.classproperty
    def EMAIL_HARD_BOUNCE(cls):
        return cls("email_hard_bounce")
    
    @schemas.classproperty
    def SUBSCRIPTION(cls):
        return cls("subscription")
    
    @schemas.classproperty
    def RESUBSCRIPTION(cls):
        return cls("resubscription")
    
    @schemas.classproperty
    def UNSUBSCRIBE_REASON(cls):
        return cls("unsubscribe_reason")
    
    @schemas.classproperty
    def FACEBOOK_LIKE(cls):
        return cls("facebook_like")
    
    @schemas.classproperty
    def SOCIAL_SHARE(cls):
        return cls("social_share")
    
    @schemas.classproperty
    def UNSUBSCRIBE_MANUAL(cls):
        return cls("unsubscribe_manual")
    
    @schemas.classproperty
    def DOUBLE_OPTIN(cls):
        return cls("double_optin")
    
    @schemas.classproperty
    def DOUBLE_OPTIN_RESEND(cls):
        return cls("double_optin_resend")
    
    @schemas.classproperty
    def EMAIL_SPAM_COMPLAINT(cls):
        return cls("email_spam_complaint")
    
    @schemas.classproperty
    def EMAIL_FIELD_DISABLE(cls):
        return cls("email_field_disable")
    
    @schemas.classproperty
    def CELLPHONE_FIELD_DISABLE(cls):
        return cls("cellphone_field_disable")
    
    @schemas.classproperty
    def PHONE_FIELD_DISABLE(cls):
        return cls("phone_field_disable")
    
    @schemas.classproperty
    def UNSUBSCRIBE_API(cls):
        return cls("unsubscribe_api")
    
    @schemas.classproperty
    def EMAIL_FIELD_ENABLE(cls):
        return cls("email_field_enable")
    
    @schemas.classproperty
    def CELLPHONE_FIELD_ENABLE(cls):
        return cls("cellphone_field_enable")
    
    @schemas.classproperty
    def PHONE_FIELD_ENABLE(cls):
        return cls("phone_field_enable")
    
    @schemas.classproperty
    def EDIT_SUBSCRIPTION(cls):
        return cls("edit_subscription")
    
    @schemas.classproperty
    def DOUBLE_OPTEDIT(cls):
        return cls("double_optedit")
    
    @schemas.classproperty
    def AUTOMATION_EVENT(cls):
        return cls("automation_event")
    
    @schemas.classproperty
    def PUSH_SEND(cls):
        return cls("push_send")
    
    @schemas.classproperty
    def PUSH_OPEN(cls):
        return cls("push_open")
    
    @schemas.classproperty
    def PUSH_CLICK(cls):
        return cls("push_click")
    
    @schemas.classproperty
    def PUSH_RECEIVED(cls):
        return cls("push_received")
    
    @schemas.classproperty
    def PUSH_ERROR(cls):
        return cls("push_error")
    
    @schemas.classproperty
    def PUSH_CANCELED(cls):
        return cls("push_canceled")
    
    @schemas.classproperty
    def REPLY_TO_EMAIL(cls):
        return cls("reply_to_email")
    
    @schemas.classproperty
    def WEB_PUSH_SEND(cls):
        return cls("web_push_send")
    
    @schemas.classproperty
    def WEB_PUSH_DELIVERED(cls):
        return cls("web_push_delivered")
    
    @schemas.classproperty
    def WEB_PUSH_OPEN(cls):
        return cls("web_push_open")
    
    @schemas.classproperty
    def WEB_PUSH_BOUNCE(cls):
        return cls("web_push_bounce")
    
    @schemas.classproperty
    def WEB_PUSH_CLICK(cls):
        return cls("web_push_click")
    
    @schemas.classproperty
    def WEB_PUSH_SUBSCRIPTION(cls):
        return cls("web_push_subscription")
    
    @schemas.classproperty
    def WEB_PUSH_UNSUBSCRIPTION(cls):
        return cls("web_push_unsubscription")
    
    @schemas.classproperty
    def ADD_PUSH_CONTACT(cls):
        return cls("add_push_contact")
    
    @schemas.classproperty
    def REMOVE_PUSH_CONTACT(cls):
        return cls("remove_push_contact")
    
    @schemas.classproperty
    def FORGET_SUBSCRIPTION(cls):
        return cls("forget_subscription")
    
    @schemas.classproperty
    def CHANGE_CONSENT(cls):
        return cls("change_consent")
    
    @schemas.classproperty
    def PUSH_UNSUBSCRIPTION(cls):
        return cls("push_unsubscription")
    
    @schemas.classproperty
    def VOICE_MENU_EVENT(cls):
        return cls("voice_menu_event")
    
    @schemas.classproperty
    def VOICE_REDIRECT(cls):
        return cls("voice_redirect")
    
    @schemas.classproperty
    def AUTOMATION_ACTION(cls):
        return cls("automation_action")
    
    @schemas.classproperty
    def AUTOMATION_TRIGGER(cls):
        return cls("automation_trigger")
    
    @schemas.classproperty
    def PUSH_DELIVERED(cls):
        return cls("push_delivered")
    
    @schemas.classproperty
    def ATTACH_TAG(cls):
        return cls("attach_tag")
    
    @schemas.classproperty
    def DETACH_TAG(cls):
        return cls("detach_tag")
    
    @schemas.classproperty
    def SMART_SMS_SEND(cls):
        return cls("smart_sms_send")
    
    @schemas.classproperty
    def SMART_SMS_OPEN(cls):
        return cls("smart_sms_open")
    
    @schemas.classproperty
    def SMART_SMS_CLICK(cls):
        return cls("smart_sms_click")
    
    @schemas.classproperty
    def SMART_SMS_REPORT(cls):
        return cls("smart_sms_report")
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'offset': typing.Union[OffsetSchema, decimal.Decimal, int, ],
        'limit': typing.Union[LimitSchema, decimal.Decimal, int, ],
        'date_min': typing.Union[DateMinSchema, str, datetime, ],
        'date_max': typing.Union[DateMaxSchema, str, datetime, ],
        'action_name': typing.Union[ActionNameSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_offset = api_client.QueryParameter(
    name="offset",
    style=api_client.ParameterStyle.FORM,
    schema=OffsetSchema,
    explode=True,
)
request_query_limit = api_client.QueryParameter(
    name="limit",
    style=api_client.ParameterStyle.FORM,
    schema=LimitSchema,
    explode=True,
)
request_query_date_min = api_client.QueryParameter(
    name="date_min",
    style=api_client.ParameterStyle.FORM,
    schema=DateMinSchema,
    explode=True,
)
request_query_date_max = api_client.QueryParameter(
    name="date_max",
    style=api_client.ParameterStyle.FORM,
    schema=DateMaxSchema,
    explode=True,
)
request_query_action_name = api_client.QueryParameter(
    name="action_name",
    style=api_client.ParameterStyle.FORM,
    schema=ActionNameSchema,
    explode=True,
)
# Path params
ContactIdSchema = ContactQueryId
ListIdSchema = QueryId
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'contact_id': typing.Union[ContactIdSchema, ],
        'list_id': typing.Union[ListIdSchema, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_contact_id = api_client.PathParameter(
    name="contact_id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=ContactIdSchema,
    required=True,
)
request_path_list_id = api_client.PathParameter(
    name="list_id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=ListIdSchema,
    required=True,
)
_auth = [
    'Apikey',
]


class SchemaFor200ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            
            
            class items(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ContactActivity']:
                        return ContactActivity
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ContactActivity'], typing.List['ContactActivity']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'items':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ContactActivity':
                    return super().__getitem__(i)
            __annotations__ = {
                "items": items,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["items"]) -> MetaOapg.properties.items: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["items", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["items"]) -> typing.Union[MetaOapg.properties.items, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["items", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        items: typing.Union[MetaOapg.properties.items, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *args,
            items=items,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor401ResponseBodyApplicationJson = Unauthorized


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor401ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor401ResponseBodyApplicationJson),
    },
)
SchemaFor403ResponseBodyApplicationJson = Forbidden


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor403ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor403ResponseBodyApplicationJson),
    },
)
SchemaFor408ResponseBodyApplicationJson = RequestTimeout


@dataclass
class ApiResponseFor408(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor408ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_408 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor408,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor408ResponseBodyApplicationJson),
    },
)
SchemaFor422ResponseBodyApplicationJson = UnprocessableEntity


@dataclass
class ApiResponseFor422(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor422ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_422 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor422,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor422ResponseBodyApplicationJson),
    },
)
SchemaFor429ResponseBodyApplicationJson = TooManyRequests


@dataclass
class ApiResponseFor429(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor429ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_429 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor429,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor429ResponseBodyApplicationJson),
    },
)
SchemaFor500ResponseBodyApplicationJson = InternalServerError


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor500ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationJson),
    },
)
SchemaFor503ResponseBodyApplicationJson = ServiceUnavailable


@dataclass
class ApiResponseFor503(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor503ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_503 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor503,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor503ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    '401': _response_for_401,
    '403': _response_for_403,
    '408': _response_for_408,
    '422': _response_for_422,
    '429': _response_for_429,
    '500': _response_for_500,
    '503': _response_for_503,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _get_all_contact_activities_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _get_all_contact_activities_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _get_all_contact_activities_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _get_all_contact_activities_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        Get all contact activities
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value

        _path_params = {}
        for parameter in (
            request_path_contact_id,
            request_path_list_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)

        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)

        prefix_separator_iterator = None
        for parameter in (
            request_query_offset,
            request_query_limit,
            request_query_date_min,
            request_query_date_max,
            request_query_action_name,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class GetAllContactActivities(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def get_all_contact_activities(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get_all_contact_activities(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get_all_contact_activities(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get_all_contact_activities(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._get_all_contact_activities_oapg(
            query_params=query_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._get_all_contact_activities_oapg(
            query_params=query_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


